# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Assert PXE nic value
  ansible.builtin.assert:
    that:
      - pxe_nic in nic_addr_up.stdout
    success_msg: " PXE {{ success_msg_nic }}"
    fail_msg: "{{ fail_msg_nic }} for PXE nic"
  tags: [ validate, pxe-network ]

- name: Verify public nic is different from others
  ansible.builtin.assert:
    that:
      - public_nic != pxe_nic
    success_msg: "{{ success_msg_different_nics }}"
    fail_msg: "{{ fail_msg_different_nics }}"
  tags: [ validate, bmc-network, pxe-network ]

### PXE nic
# LOM Configuration
- name: Extracting PXE nic details in case of LOM
  block:
  - name: Set fact for extracting the subnet of PXE nic
    ansible.builtin.set_fact:
      pxe_nic_subnet: "{{ admin_nic_subnet }}"
    tags: init

  - name: Assign PXE nic details in case of LOM
    ansible.builtin.set_fact:
      pxe_nic_ip: "{{ admin_nic_ip }}"
      pxe_nic_netmask: "{{ admin_nic_netmask }}"
    tags: init
  when:
    - network_interface_type == "lom"
    - admin_nic == pxe_nic

# Dedicated configuration or ROCE Configuration
- name: Extracting PXE nic details in case of dedicated
  block:
  - name: Assign PXE nic details in case of LOM
    ansible.builtin.set_fact:
      pxe_nic_subnet: "{{ lookup('vars','ansible_'+pxe_nic).ipv4.network }}"
      pxe_nic_ip: "{{ lookup('vars','ansible_'+pxe_nic).ipv4.address }}"
      pxe_nic_netmask: "{{ lookup('vars','ansible_'+pxe_nic).ipv4.netmask }}"
    tags: init
  when:
    - network_interface_type == "dedicated" or
      admin_nic != pxe_nic

- name: Check the subnet of PXE nic start range
  ansible.builtin.shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ pxe_nic_start_range }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ pxe_nic_netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: calc_pxe_start_subnet
  changed_when: false
  tags: init

- name: Set the calculated PXE network subnet
  ansible.builtin.set_fact:
    pxe_start_subnet: "{{ calc_pxe_start_subnet.stdout }}"
  tags: init

- name: Check the subnet of PXE nic end range
  ansible.builtin.shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ pxe_nic_end_range }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ pxe_nic_netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: calc_pxe_end_subnet
  changed_when: false
  tags: init

- name: Set the calculated PXE network subnet
  ansible.builtin.set_fact:
    pxe_end_subnet: "{{ calc_pxe_end_subnet.stdout }}"
  tags: init

- name: Assert pxe nic start and end ranges
  ansible.builtin.assert:
    that:
      - pxe_nic_start_range |  length > 6
      - pxe_nic_end_range |  length > 6
      - pxe_nic_start_range != pxe_nic_ip
      - pxe_nic_end_range != pxe_nic_ip
      - pxe_nic_start_range != pxe_nic_subnet
      - pxe_nic_end_range != pxe_nic_subnet
      - pxe_nic_start_range != pxe_nic_end_range
      - pxe_start_subnet == pxe_nic_subnet
      - pxe_end_subnet == pxe_nic_subnet
    success_msg: "{{ success_pxe }} for PXE nic"
    fail_msg: "{{ fail_pxe }} for PXE nic"
  tags: [ validate, pxe-network ]
