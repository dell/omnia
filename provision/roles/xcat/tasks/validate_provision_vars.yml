# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Include provision_config.yml
  ansible.builtin.include_vars: "{{ playbook_dir }}/../input/provision_config.yml"

- name: Validate input parameters of base_vars are not empty
  ansible.builtin.fail:
    msg: "{{ input_provision_fail_msg }}"
  when:
    - timezone | length < 1 or
      language | length < 1 or
      iso_file_path | length < 1 or
      default_lease_time | length < 1 or
      provision_os | length < 1

- name: Validate default lease time
  ansible.builtin.assert:
    that:
      - default_lease_time|int
      - default_lease_time|int <= 31536000
      - default_lease_time|int >= 21600
    success_msg: "{{ default_lease_time_success_msg }}"
    fail_msg: "{{ default_lease_time_fail_msg }}"

- name: Convert timezone.txt to linux format
  ansible.builtin.command: dos2unix {{ role_path }}/files/timezone.txt
  failed_when: false
  changed_when: false

- name: Searching for timezone
  ansible.builtin.lineinfile:
    path: "{{ role_path }}/files/timezone.txt"
    line: "{{ timezone }}"
    state: present
  check_mode: true
  register: timezone_search

- name: Assert timezone
  ansible.builtin.assert:
    that: timezone_search is not changed
    success_msg: "{{ timezone_success_msg }}"
    fail_msg: "{{ timezone_fail_msg }}"
  register: timezone_check

- name: Assert language for provisioning nodes
  ansible.builtin.fail:
    msg: "{{ language_fail_msg }}"
  when: '"en-US" not in language'

- name: Assert operating system
  ansible.builtin.assert:
    that:
      - provision_os | lower == os_supported_rhel or
        provision_os | lower == os_supported_rocky
    success_msg: "{{ provision_os_success_msg }}"
    fail_msg: "{{ provision_os_fail_msg }}"

- name: Verify the iso_file_path
  ansible.builtin.stat:
    path: "{{ iso_file_path }}"
  register: result_path_iso_file

- name: Assert iso_file_path location
  ansible.builtin.fail:
    msg: "{{ iso_file_path_missing_msg }}"
  when: not result_path_iso_file.stat.exists

- name: Validate iso_file_path name
  ansible.builtin.assert:
    that:
      - result_path_iso_file.stat.exists
      - '".iso" in iso_file_path'
      - provision_os in iso_file_path | lower
    success_msg: "{{ iso_file_path_success_msg }}"
    fail_msg: "{{ iso_file_path_fail_msg }}"

- name: Warning - waiting for {{ warning_wait_time }} seconds
  ansible.builtin.pause:
    seconds: "{{ warning_wait_time }}"
    prompt: "{{ dns_empty_warning_msg }}"
  when:
    - primary_dns | length < 1
    - secondary_dns | length < 1

- name: Validate primary_dns is not empty when secondary_dns provided
  ansible.builtin.fail:
    msg: "{{ primary_dns_empty_msg }}"
  when:
    - primary_dns | length < 1
    - secondary_dns | length >1

- name: Validate dns inputs
  block:
    - name: Assert primary_dns when not empty
      ansible.builtin.assert:
        that:
          - primary_dns | ipv4
        success_msg: "{{ primary_dns_success_msg }}"
        fail_msg: "{{ primary_dns_fail_msg }}"

    - name: Test reachability of primary_dns
      ansible.builtin.command: ping -c3 {{ primary_dns }}
      failed_when: false
      changed_when: false
      register: primary_dns_check

    - name: Verify primary_dns is reachable
      ansible.builtin.fail:
        msg: "{{ primary_dns_not_reachable_msg }}"
      when: ping_search_key in primary_dns_check.stdout

    - name: Validate secondary_dns inputs
      block:
        - name: Assert secondary_dns when not empty
          ansible.builtin.assert:
            that:
              - secondary_dns | ipv4
              - secondary_dns != primary_dns
            success_msg: "{{ secondary_dns_success_msg }}"
            fail_msg: "{{ secondary_dns_fail_msg }}"

        - name: Test reachability of secondary_dns
          ansible.builtin.command: ping -c3 {{ secondary_dns }}
          failed_when: false
          changed_when: false
          register: secondary_dns_check

        - name: Verify secondary_dns is reachable
          ansible.builtin.debug:
            msg: "{{ secondary_dns_not_reachable_msg }}"
          when: ping_search_key in secondary_dns_check.stdout
      when: secondary_dns | length > 1
  when: primary_dns | length > 1

- name: Assert provision credentials
  block:
    - name: Assert provision_password
      ansible.builtin.assert:
        that:
          - provision_password | length > min_length | int - 1
          - provision_password | length < max_length | int + 1
          - '"-" not in provision_password '
          - '"\\" not in provision_password '
          - '"\"" not in provision_password '
          - " \"'\" not in provision_password "
      no_log: true
  rescue:
    - name: Provision password validation check
      ansible.builtin.fail:
        msg: "{{ provision_password_fail_msg }}"

- name: Assert postgres db credentials
  block:
    - name: Assert postgresdb_password
      ansible.builtin.assert:
        that:
          - postgresdb_password | length > min_length | int - 1
          - postgresdb_password | length < max_length | int + 1
          - '"-" not in postgresdb_password'
          - '"\\" not in postgresdb_password'
          - '"\"" not in postgresdb_password'
          - " \"'\" not in postgresdb_password"
          - '"@" not in postgresdb_password'
          - postgresdb_password is regex(("^(([a-z]|[a-z][a-z0-9\-]*[a-z0-9])\.)*([a-z]|[a-z][a-z0-9\-]*[a-z0-9])$"))
      no_log: true
  rescue:
    - name: Validation check for postgresdb_password
      ansible.builtin.fail:
        msg: "{{ postgresdb_password_fail_msg }}"