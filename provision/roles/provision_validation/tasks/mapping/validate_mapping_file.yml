# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Check that the pxe mapping file path exists
  ansible.builtin.stat:
    path: "{{ pxe_mapping_file_path }}"
  register: pxe_stat_result

- name: Fail if config file doesn't exist
  ansible.builtin.fail:
    msg: "{{ pxe_path_fail_msg }}"
  when: not pxe_stat_result.stat.exists

- name: Delete temp_mapping_file
  ansible.builtin.file:
    path: "{{ temp_mapping_file_path }}"
    state: absent

- name: Remove blank lines in mapping file
  ansible.builtin.shell: set -o pipefail && awk -F, 'length>NF+1' {{ pxe_mapping_file_path }} > {{ temp_mapping_file_path }}
  changed_when: false

- name: Remove blank spaces in mapping file
  ansible.builtin.shell: set -o pipefail && sed -i.bak -E 's/(^|,)[[:blank:]]+/\1/g; s/[[:blank:]]+(,|$)/\1/g'  {{ temp_mapping_file_path }}
  changed_when: false

- name: Delete temp_mapping_file.bak
  ansible.builtin.file:
    path: "{{ temp_mapping_file_path }}.bak"
    state: absent

- name: Read host mapping file from CSV file and return a dictionary
  community.general.read_csv:
    path: "{{ temp_mapping_file_path }}"
    key: "{{ mapping_file_key }}"
  register: read_mapping_file

- name: Check if header is present in mapping file
  ansible.builtin.shell: set -o pipefail && awk 'NR==1 { print $1}' "{{ temp_mapping_file_path }}"
  register: mapping_file_header
  changed_when: false

- name: Fail if header not in correct format
  ansible.builtin.assert:
    that: mapping_file_header.stdout ==  host_mapping_header_format
    fail_msg: "{{ mapping_file_header_fail_msg }}"

- name: Check if mapping file is comma seperated
  ansible.builtin.shell: awk -F\, '{print NF-1}' "{{ temp_mapping_file_path }}"
  register: comma_seperated_check
  changed_when: false

- name: Fail if not comma seperated or if all fields are not given for MAC,Hostname,IP
  ansible.builtin.fail:
    msg: "{{ mapping_file_seperation_fail_msg }}"
  when: not (item == "2") and not (item == "-1")
  with_items: "{{ comma_seperated_check.stdout_lines }}"

- name: Initialize count variables
  ansible.builtin.set_fact:
    list_of_mac: []
    list_of_ips: []
    list_of_hostnames: []
    count_total_items: "{{ read_mapping_file.dict | length }}"

- name: Create list of IPs and hostnames defined in mapping file
  ansible.builtin.set_fact:
    list_of_ips: "{{ [item.value.IP] + list_of_ips }}"
    list_of_hostnames: "{{ [item.value.Hostname] + list_of_hostnames }}"
  loop: "{{ read_mapping_file.dict | dict2items }}"
  loop_control:
    label: "{{ item.value.MAC }}"

- name: Assert hostnames
  ansible.builtin.assert:
    that:
      - '"_" not in item'
      - '"." not in item'
      - '" " not in item'
    quiet: true
    fail_msg: "{{ hostname_chars_fail_msg + item }}"
  with_items: "{{ list_of_hostnames }}"

- name: Find count of unique MAC,Hostname,IP
  ansible.builtin.set_fact:
    count_unique_ip: "{{ list_of_ips | unique | length }}"
    count_unique_hostnames: "{{ list_of_hostnames | unique | length }}"

- name: Validation to check if unique IPs in mapping file
  ansible.builtin.fail:
    msg: "{{ duplicate_ip_fail_msg }}"
  when: not (count_unique_ip | int == count_total_items | int)

- name: Validation to check if unique hostnames in mapping file
  ansible.builtin.fail:
    msg: "{{ duplicate_hostname_fail_msg }}"
  when: not (count_unique_hostnames | int == count_total_items | int)
