# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Initialize service_tag and bmc_ip
  ansible.builtin.set_fact:
    service_tag: "Not Found"
    bmc_ip: "Not Found"

- name: Install dmidecode package
  ansible.builtin.package:
    name: dmidecode
    state: present

- name: Get service tag
  ansible.builtin.shell: >
      set -o pipefail && \
      dmidecode -t 1 | grep Serial
  changed_when: false
  failed_when: false
  register: service_tag_details

- name: Set service_tag
  ansible.builtin.set_fact:
    service_tag: "{{ service_tag_details.stdout.split(':')[1].strip() }}"
  when: service_tag_details.stdout is defined

- name: Fetch BMC IP
  ansible.builtin.shell: >
    set -o pipefail && \
    ipmitool lan print 1 | grep -E "IP Address\s+:"
  register: fetch_bmc_ip
  changed_when: false

- name: Set BMC IP
  ansible.builtin.set_fact:
    bmc_ip: "{{ fetch_bmc_ip.stdout.split(':')[1] }}"
  when: fetch_bmc_ip.stdout is defined

- name: Check IP and service tag already present in node_inventory
  ansible.builtin.command: grep "{{ inventory_hostname }} service_tag={{ service_tag }}" "{{ node_inventory_path }}"
  delegate_to: localhost
  register: check_service_tag
  failed_when: false
  changed_when: false

- name: Delete entry where service tag updated
  ansible.builtin.lineinfile:
    path: "{{ node_inventory_path }}"
    state: absent
    regexp: "{{ item }}"
  delegate_to: localhost
  with_items: "{{ inventory_hostname }}"
  throttle: 1
  when:
    - check_service_tag.stdout is defined
    - item not in check_service_tag.stdout

- name: Check IP already present in node_inventory
  ansible.builtin.command: grep "{{ inventory_hostname }}" "{{ node_inventory_path }}"
  delegate_to: localhost
  register: check_node_inventory
  failed_when: false
  changed_when: false

- name: Add the host to node_inventory if not present
  ansible.builtin.lineinfile:
    path: "{{ node_inventory_path }}"
    line: "{{ item }} service_tag={{ service_tag }} operating_system={{ ansible_distribution }} bmc_ip={{ bmc_ip }}"
    state: present
    create: true
    mode: "{{ file_perm }}"
  delegate_to: localhost
  with_items: "{{ inventory_hostname }}"
  throttle: 1
  when:
    - service_tag_details.stdout is defined
    - check_node_inventory.stdout is defined
    - item not in check_node_inventory.stdout
