#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Fetch the network interfaces in UP state in the system
  ansible.builtin.shell: |
    set -o pipefail
    /usr/sbin/ip a | awk '/state UP/{print $2}'
  register: nic_addr_up
  changed_when: false

- name: Include network_spec.yml
  block:
    - name: Include network_spec file
      ansible.builtin.include_vars: "{{ network_spec }}"
      register: include_network_spec
      no_log: true
  rescue:
    - name: Failed to include network_spec.yml
      ansible.builtin.fail:
        msg: "{{ network_spec_syntax_fail_msg }} Error: {{ include_network_spec.message }}"

- name: Parse network_spec data
  ansible.builtin.set_fact:
    network_data: "{{ network_data | default({}) | combine({item.key: item.value}) }}"
  with_dict: "{{ Networks }}"

- name: Check admin network details are valid
  block:
    - name: Execute Python script to validate network address
      ansible.builtin.command: "{{ python_version }} {{ network_address_script }} admin_network"
      register: script_output
      changed_when: false
      environment:
        net_data: "{{ network_data | to_json }}"
  rescue:
    - name: Failed, Invalid admin network details
      ansible.builtin.fail:
        msg: "{{ fail_msg_admin_nic_details }} {{ fail_msg_admin_nic_ip_details }}"

- name: Validate admin nic ip status
  ansible.builtin.assert:
    that:
      - script_output.stdout | length > 0
      - script_output.rc == 0
    fail_msg: "{{ fail_msg_admin_nic_details }} {{ fail_msg_admin_nic_ip_details }}"

- name: Set admin_nic_ip
  ansible.builtin.set_fact:
    admin_nic_ip: "{{ script_output.stdout }}"
    admin_nic: "{{ network_data.admin_network.nic_name }}"

- name: Assert admin nic value
  ansible.builtin.assert:
    that:
      - admin_nic in nic_addr_up.stdout
    success_msg: " Admin {{ success_msg_nic }}"
    fail_msg: "{{ validate_nic_status }} for admin nic"
