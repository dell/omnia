#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
- name: Retrieve hosts from PostgreSQL
  community.postgresql.postgresql_query:
    db: omniadb
    login_password: "{{ postgresdb_password }}"
    query: "SELECT admin_ip FROM cluster.nodeinfo"
  register: admin_ips
  when: db_ping_new.is_available

- name: Store CPU data
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail &&
      sshpass -p '{{ provision_password }}' ssh {{ item }}
      'set -o pipefail &&
        intel_cpu_check=`lscpu | grep -i "^vendor ID" | grep -ic "Intel"`
        amd_cpu_check=`lscpu | grep -i "^vendor ID" | grep -ic "AMD"`
        cpu_count=`lscpu | grep -i "^socket" | grep -o -E "[0-9]+"`

        if [ $intel_cpu_check -gt 0 ]; then
          echo "intel $cpu_count"
        # Check for AMD CPU
        elif [ $amd_cpu_check -gt 0 ]; then
          echo "amd $cpu_count"
        else
          echo " $cpu_count"
        fi
      '
  register: cpus
  loop: "{{ admin_ips.query_result | map(attribute='admin_ip') | list }}"
  when: db_ping_new.is_available and item != ansible_default_ipv4.address
  changed_when: true
  failed_when: false

- name: Initialize dictionary
  ansible.builtin.set_fact:
    cpu_dict: {}
  when: db_ping_new.is_available

- name: Build dictionary for each ip
  ansible.builtin.set_fact:
    cpu_dict: "{{ cpu_dict | default({}) | combine({item.item: item.stdout}) }}"
  loop: "{{ cpus.results }}"
  when: db_ping_new.is_available
  no_log: true

- name: Store cpu type in database
  community.postgresql.postgresql_query:
    db: omniadb
    login_password: "{{ postgresdb_password }}"
    query: "UPDATE cluster.nodeinfo SET cpu = '{{ item.value.split(' ')[0] }}' WHERE admin_ip = '{{ item.key }}'"
  loop: "{{ cpu_dict | dict2items }}"
  when: db_ping_new.is_available

- name: Store cpu count in database
  community.postgresql.postgresql_query:
    db: omniadb
    login_password: "{{ postgresdb_password }}"
    query: "UPDATE cluster.nodeinfo SET cpu_count = '{{ item.value.split(' ')[1] }}' WHERE admin_ip = '{{ item.key }}'"
  loop: "{{ cpu_dict | dict2items }}"
  when:
    - db_ping_new.is_available
    - item.value is not none
    - item.value.split(' ') | length == 2
