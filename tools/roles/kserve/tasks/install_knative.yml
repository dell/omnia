#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.aa
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Install Kserve dependency knative
  block:
    # Install Knative
    - name: Install knative serving crds
      ansible.builtin.command: kubectl apply -f "{{ manifest_local_path }}/knative_serving_crds_manifest.yaml"
      register: knative_crds_install_status
      changed_when: knative_crds_install_status.changed
      failed_when: knative_crds_install_status.rc != 0

    - name: Apply knative serving core manifest
      ansible.builtin.command: kubectl apply -f {{ manifest_local_path }}/knative_serving_core_manifest.yaml
      register: knative_core_install_status
      changed_when: knative_core_install_status.changed
      failed_when: knative_core_install_status.rc != 0

    - name: Flag to check knative namespace tracked as non running namespace
      ansible.builtin.set_fact:
        knative_namespace_flag: false

    # Wait for pods under knative namespace to come up.
    - name: Check if namespace exists "{{ kserve_knative_namespace }}"
      ansible.builtin.shell: >
        set -o pipefail && \
        kubectl get ns "{{ kserve_knative_namespace }}" 2>&1 | wc -l
      register: knative_namespace_count
      changed_when: false

    - name: Fail if namespace is not present "{{ kserve_knative_namespace }}"
      ansible.builtin.assert:
        that:
          - knative_namespace_count.stdout | int ==2
        fail_msg: "{{ fail_msg_knative_ns }}"

    - name: Verify pods under namespace "{{ kserve_knative_namespace }}"
      block:
        - name: Wait for Knative pods to be running in namespace "{{ kserve_knative_namespace }}"
          ansible.builtin.shell: >
            set -o pipefail && \
            kubectl get pods -n '{{ kserve_knative_namespace }}' 2>&1 | grep -v Running | wc -l
          register: knative_command_output
          until: knative_command_output.stdout | int < 2
          retries: "{{ max_attempts }}"
          delay: "{{ wait_time }}"
          changed_when: false
          failed_when: false

        - name: Add to non running namespace list
          ansible.builtin.set_fact:
            non_running_pods_ns: "{{ non_running_pods_ns + [kserve_knative_namespace] }}"
          when: knative_command_output.stdout | int >= 2

        - name: Set knative namespace flag status to true
          ansible.builtin.set_fact:
            knative_namespace_flag: true
          when: knative_command_output.stdout | int >= 2

    # knative net-istio
    - name: Apply knative net-istio manifest
      ansible.builtin.command: kubectl apply -f {{ manifest_local_path }}/knative_net_istio_manifest.yaml
      register: knative_istio_install_status
      changed_when: knative_istio_install_status.changed
      failed_when: knative_istio_install_status.rc != 0

    # Wait for pods under knative namespace to come up.
    - name: Verify pods under namespace "{{ kserve_knative_namespace }}"
      block:
        - name: Wait for Knative pods to be running in namespace "{{ kserve_knative_namespace }}"
          ansible.builtin.shell: >
            set -o pipefail && \
            kubectl get pods -n '{{ kserve_knative_namespace }}' 2>&1 | grep -v Running | wc -l
          register: knative_command_output
          until: knative_command_output.stdout | int < 2
          retries: "{{ max_attempts }}"
          delay: "{{ wait_time }}"
          changed_when: false
          failed_when: false

        - name: Add knative namespace to non running list if already not added
          ansible.builtin.set_fact:
            non_running_pods_ns: "{{ non_running_pods_ns + [kserve_knative_namespace] }}"
          when: knative_command_output.stdout | int >= 2 and  not knative_namespace_flag

    # Inference service domain Configuration
    - name: Inference Service domain configuration
      ansible.builtin.command: >
        kubectl patch configmap/config-domain \
        --namespace {{ kserve_knative_namespace }} \
        --type merge \
        --patch '{"data":{"{{ inference_service_domain }}":""}}'
      register: domain_config
      changed_when: domain_config.changed
      failed_when: domain_config.rc != 0