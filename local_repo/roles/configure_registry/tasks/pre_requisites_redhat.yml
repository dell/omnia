# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Warning - Removing conflicting packages
  ansible.builtin.pause:
    seconds: "{{ warning_wait_time }}"
    prompt: "{{ warning_msg_packages_conflict_with_containerd }}"

# Remove conflicting packages
- name: Remove conflicting packages- podman, containers-common and buildah
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: absent
  with_items: "{{ conflicting_packages }}"

- name: Install python rpm interface
  ansible.builtin.dnf:
    name: python3-rpm
    state: present

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: rpm
  no_log: true

- name: Check whether containerd.io version
  ansible.builtin.set_fact:
    higher_containerd_version: true
  when: (containerd_str in ansible_facts.packages) and (ansible_facts.packages[containerd_str][0]['version'] is ansible.builtin.version(containerd_version, '>'))

- name: Warning prompt if containerd is downgrading
  ansible.builtin.pause:
   seconds: 20
   prompt: "Higher version of {{ containerd_str }} {{ ansible_facts.packages['containerd.io'][0]['version'] }} already present, Proceed with downgrading to {{ containerd_version }} ?"
  when: higher_containerd_version is defined and higher_containerd_version

# Install Pre-requisites
# Download and Install containerd
- name: Download containerd.io RPM
  ansible.builtin.get_url:
    url: "{{ containerd_url }}"
    dest: "{{ containerd_rpm_dest }}"
    mode: "{{ file_permission }}"
  register: download_containerd
  until: download_containerd is not failed
  retries: "{{ max_retries }}"

- name: Install containerd.io
  ansible.builtin.dnf:
    name: "{{ containerd_rpm_dest }}"
    state: present
    allow_downgrade: true
    disable_gpg_check: true

- name: Start containerd
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: true

# Download and Install nerdctl
- name: Download nerdctl archive
  ansible.builtin.get_url:
    url: "{{ nerdctl_url }}"
    dest: "{{ nerdctl_archive_dest }}"
    mode: "{{ file_permission }}"
  register: download_nerdctl
  until: download_nerdctl is not failed
  retries: "{{ max_retries }}"

- name: Create nerdctl temp directory
  ansible.builtin.file:
    path: "{{ temp_download_dir }}/nerdctl"
    state: directory
    mode: "{{ directory_permissions }}"

- name: Extract nerdctl archive
  ansible.builtin.unarchive:
    src: "{{ nerdctl_archive_dest }}"
    dest: "{{ temp_download_dir }}/nerdctl/"
    mode: "{{ file_permission }}"

- name: Make nerdctl executable
  ansible.builtin.file:
    path: "{{ nerdctl_folder_dest }}"
    mode: "{{ nerdctl_folder_permission }}"

- name: Move nerdctl to /usr/local/bin
  ansible.builtin.copy:
    src: "{{ nerdctl_folder_dest }}"
    dest: "{{ nerdctl_executable_dest }}"
    mode: preserve

# Download and install CNI
- name: Create /opt/cni/ directory
  ansible.builtin.file:
    path: "{{ cni_download_dir }}"
    state: directory
    mode: "{{ directory_permissions }}"

- name: Create /opt/cni/bin/ directory
  ansible.builtin.file:
    path: "{{ cni_bin_download_dir }}"
    state: directory
    mode: "{{ directory_permissions }}"

- name: Download CNI archive
  ansible.builtin.get_url:
    url: "{{ cni_url }}"
    dest: "{{ cni_archive_dest }}"
    mode: "{{ directory_permissions }}"
  register: download_cni
  until: download_cni is not failed
  retries: "{{ max_retries }}"

- name: Extract cni archive
  ansible.builtin.unarchive:
    src: "{{ cni_archive_dest }}"
    dest: "{{ cni_bin_download_dir }}"
    mode: "{{ directory_permissions }}"

- name: Set execute permissions for extracted CNI files
  ansible.builtin.file:
    path: "{{ cni_bin_download_dir }}"
    recurse: true
    mode: "{{ cni_mode }}"
