# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Initiate nerdctl-registry
- name: Copy nerdctl-registry files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: preserve
  with_items: "{{ nerdctl_registry_path }}"

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable nerdctl-registry service
  block:
    - name: Start and enable nerdctl-registry service
      ansible.builtin.systemd:
        name: nerdctl-registry
        state: restarted
        enabled: true
      register: service_result
      until: service_result is succeeded
      retries: "{{ retry_count }}"
      delay: "{{ delay_time }}"

    - name: Wait for nerdctl registry to start
      ansible.builtin.pause:
        seconds: "{{ registry_wait_time }}"
        prompt: "{{ registry_wait_msg }}"

    - name: Check if omnia-registry container exists
      ansible.builtin.command: nerdctl ps -a
      register: container_output
      changed_when: false

    - name: Fail if omnia-registry container does not exist
      ansible.builtin.fail:
        msg: "{{ omnia_registry_failure_msg }}"
      when: "'omnia-registry' not in container_output.stdout"
  rescue:
    - name: Failed to start nerdctl-registry service
      ansible.builtin.fail:
        msg: "{{ nerdctl_registry_enable_fail_msg }}"

# Copy certificate to containerd certificate directory
- name: Create containerd certificate directory for private registry
  ansible.builtin.file:
    path: "{{ containerd_certs_dir }}/{{ hostname_result.stdout }}:{{ nerdctl_registry_port }}"
    state: directory
    mode: "{{ directory_permissions }}"

- name: Copy certificate file to containerd certs.d directory
  ansible.builtin.copy:
    src: "{{ openssl_cert_path }}"
    dest: "{{ containerd_certs_dir }}/{{ hostname_result.stdout }}:{{ nerdctl_registry_port }}/ca.crt"
    mode: "{{ file_permission }}"

- name: Fetch control_plane hostname
  ansible.builtin.command: hostname
  changed_when: false
  register: cp_hostname

- name: Check /etc/hosts has control plane hostname
  ansible.builtin.command: cat "{{ hosts_file }}"
  changed_when: false
  register: hosts_file_content

- name: Update control plane hostname in /etc/hosts
  ansible.builtin.lineinfile:
    path: "{{ hosts_file }}"
    insertafter: "EOF"
    state: present
    line: "127.0.0.1 {{ cp_hostname.stdout }}"
  when: cp_hostname.stdout not in hosts_file_content.stdout
