# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Set facts with omnia_default version
  ansible.builtin.set_fact:
    beegfs_version: "omnia_default"
    amdgpu_version: "omnia_default"
    rocm_version: "omnia_default"
    bcm_roce_libraries_version: "omnia_default"

- name: Check that the software_config.json exists
  ansible.builtin.stat:
    path: "{{ software_config_json_file }}"
  register: stat_result

- name: Fail if software_config.json file doesn't exist
  ansible.builtin.fail:
    msg: "{{ fail_msg_software_config_json_file }}"
  when: not stat_result.stat.exists

- name: Check JSON syntax of software_config.json
  ansible.builtin.command:
    cmd: "jq . {{ software_config_json_file }}"
  register: json_check
  ignore_errors: true
  changed_when: true

- name: Display JSON errors of software_config.json
  ansible.builtin.fail:
    msg: "{{ json_check.stderr_lines }}"
  when: json_check.rc != 0

- name: Load software_config.json
  ansible.builtin.include_vars:
    file: "{{ software_config_json_file }}"
    name: software_config

- name: Assert cluster_os_type, cluster_os_version, repo_config and softwares
  ansible.builtin.assert:
    that:
      - software_config.cluster_os_type is defined
      - software_config.cluster_os_version is defined
      - software_config.repo_config is defined
      - software_config.softwares is defined
    fail_msg: "{{ software_config_parameters_fail_msg }}"

- name: Set facts for cluster
  ansible.builtin.set_fact:
    cluster_os_type: "{{ software_config.cluster_os_type }}"
    cluster_os_version: "{{ software_config.cluster_os_version }}"
    repo_config: "{{ software_config.repo_config }}"
    softwares: "{{ software_config.softwares }}"

- name: Check if softwares list is empty
  ansible.builtin.assert:
    that:
      - softwares | default([]) | length > 0
    fail_msg: "{{ software_config_softwares_fail_msg }}"

- name: Generate software JSON file names
  ansible.builtin.set_fact:
    software_names: "{{ software_config.softwares | map(attribute='name') | select('defined') | list }}"

- name: Generate software names having subgroup
  ansible.builtin.set_fact:
    subgroup_software_names: "{{ subgroup_software_names | default([]) + [item] }}"
  loop: "{{ software_names }}"
  when: item in software_config | dict2items | map(attribute='key') | list
  # noqa: var-naming[no-jinja]

- name: Assert valid values for cluster_os_type
  ansible.builtin.assert:
    that:
      - cluster_os_type in valid_cluster_os_type
    fail_msg: "{{ cluster_os_type_fail_msg }}"

- name: Assert valid values for cluster_os_version for cluster_os_type rhel
  ansible.builtin.assert:
    that:
      - cluster_os_version in rhel_valid_os_versions
    fail_msg: "{{ cluster_os_version_fail_msg_rhel }}"
  when: cluster_os_type == 'rhel'

- name: Assert valid values for cluster_os_version for cluster_os_type rocky
  ansible.builtin.assert:
    that:
      - cluster_os_version in rocky_valid_os_versions
    fail_msg: "{{ cluster_os_version_fail_msg_rocky }}"
  when: cluster_os_type == 'rocky'

- name: Assert valid values for cluster_os_version for cluster_os_type ubuntu
  ansible.builtin.assert:
    that:
      - cluster_os_version in ubuntu_valid_os_versions
    fail_msg: "{{ cluster_os_version_fail_msg_ubuntu }}"
  when: cluster_os_type == 'ubuntu'

- name: Set variable 'os_release' to 'jammy' if OS is Ubuntu and version is 22.04
  ansible.builtin.set_fact:
    os_release: "jammy"
  when: cluster_os_type == 'ubuntu' and cluster_os_version == '22.04'

- name: Set variable 'os_release' to 'focal' if OS is Ubuntu and version is 20.04
  ansible.builtin.set_fact:
    os_release: "focal"
  when: cluster_os_type == 'ubuntu' and cluster_os_version == '20.04'

- name: Set Openldap release version for Ubuntu 22.04
  ansible.builtin.set_fact:
    openldap_release: "jammy"
  when: cluster_os_type == 'ubuntu' and os_release == 'jammy'

- name: Set Openldap release version for Ubuntu 20.04
  ansible.builtin.set_fact:
    openldap_release: "bullseye"
  when: cluster_os_type == 'ubuntu' and os_release == 'focal'

- name: Assert valid values for repo_config
  ansible.builtin.assert:
    that:
      - repo_config is defined
      - repo_config in valid_repo_config
    fail_msg: "{{ repo_config_fail_msg }}"

- name: Validate control_plane_os with cluster_os_type
  ansible.builtin.fail:
    msg: "{{ cross_os_support_fail_msg }}"
  when:
    - (control_plane_os == 'ubuntu' and cluster_os_type != 'ubuntu') or
      (control_plane_os == 'rocky' and cluster_os_type != 'rocky') or
      (control_plane_os == 'redhat' and cluster_os_type != 'rhel')

- name: Generate software JSON file patterns
  ansible.builtin.set_fact:
    software_json_list: "{{ software_names | map('regex_replace', '^(.*)$', '\\1.json') | list }}"

- name: Find JSON files in {{ json_files_directory }}
  ansible.builtin.find:
    paths: "{{ json_files_directory }}"
    patterns: "{{ software_json_list }}"
  register: filtered_json_files_list

- name: Set fact for available JSON files
  ansible.builtin.set_fact:
    available_json_list: "{{ filtered_json_files_list.files | map(attribute='path') | map('basename') | list }}"

- name: Evaluate missing JSON files
  ansible.builtin.set_fact:
    missing_json_list: "{{ software_json_list | difference(available_json_list) }}"

- name: Fail if missing JSON files
  ansible.builtin.fail:
    msg: "{{ missing_json_fail_msg }}"
  when: missing_json_list | length > 0

- name: Validation for version property for softwares mentioned in software_config.json
  block:
    - name: Validation of version property for specific softwares
      ansible.builtin.assert:
        that:
          - item.name not in specific_softwares or (item.version is defined and item.version != "")
      loop: "{{ software_config.softwares + software_config.amdgpu | default([]) }}"
      when: item.name is defined
      loop_control:
        loop_var: item
      failed_when: false
      register: version_result

    - name: Show failed version assertions
      ansible.builtin.fail:
        msg: "{{ item.msg }}"
      loop: "{{ version_result.results }}"
      when: item.evaluated_to is false

  rescue:
    - name: Versions were not defined for softwares
      ansible.builtin.fail:
        msg: "{{ versions_fail_msg }}"
      vars:
        failed_softwares: "{{ version_result.results | selectattr('msg', 'equalto', 'Assertion failed') | map(attribute='item.name') | list }}"

- name: Update software versions from software_config.json (softwares)
  ansible.builtin.set_fact:
    "{{ item.name }}_version": "{{ item.version }}"
  loop: "{{ software_config.softwares | default([]) }}"
  when: item.version is defined
  loop_control:
    loop_var: item
  # noqa: var-naming[no-jinja]

- name: Update software versions from software_config.json (custom)
  ansible.builtin.set_fact:
    "{{ item.name }}_version": "{{ item.version }}"
  loop: "{{ software_config.custom | default([]) }}"
  when: item.version is defined
  loop_control:
    loop_var: item
  # noqa: var-naming[no-jinja]

- name: Update software versions from software_config.json (subgroup)
  ansible.builtin.include_tasks: validate_software_config_subgroup_json.yml
  loop: "{{ subgroup_software_names }}"
  loop_control:
    loop_var: item
  vars:
    subgroup_software_name: "{{ item }}"
  when: subgroup_software_name is defined
  # noqa: var-naming[no-jinja]
