# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---


- name: Validate JSON file
  block:
    - name: Check if 'cluster' key exists within '{{ file_basename }}'
      ansible.builtin.assert:
        that:
          - "'cluster' in json_data.ansible_facts[file_basename]"
        fail_msg: "{{ cluster_key_fail_msg }}"

    - name: Check each item in 'cluster' for required properties based on 'type=rpm'
      ansible.builtin.assert:
        that:
          - "item.package is defined and item.repo_name is defined"
        fail_msg: "{{ rpm_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'rpm') | list }}"
      loop_control:
        loop_var: item

    - name: Check each item in 'cluster' for required properties based on 'type=ansible_galaxy_collection'
      ansible.builtin.assert:
        that:
          - "item.package is defined and item.version is defined"
        fail_msg: "{{ ansible_galaxy_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'ansible_galaxy_collection') | list }}"
      loop_control:
        loop_var: item

    - name: Check each item in 'cluster' for required properties based on 'type=git'
      ansible.builtin.assert:
        that:
          - "item.package is defined and item.version is defined and item.url is defined"
        fail_msg: "{{ git_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'git') | list }}"
      loop_control:
        loop_var: item

    - name: Check each item in 'cluster' for required properties based on 'type=image'
      ansible.builtin.assert:
        that:
          - "item.package is defined"
          - ("item.tag is defined") or ("item.digest is defined")
        fail_msg: "{{ image_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'image') | list }}"
      loop_control:
        loop_var: item

    - name: Check each item in 'cluster' for required properties based on 'type=tarball'
      ansible.builtin.assert:
        that:
          - "item.package is defined and item.url is defined"
        fail_msg: "{{ tarball_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'tarball') | list }}"
      loop_control:
        loop_var: item

    - name: Check each item in 'cluster' for required properties based on 'type=shell'
      ansible.builtin.assert:
        that:
          - "item.package is defined and item.url is defined"
        fail_msg: "{{ shell_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'shell') | list }}"
      loop_control:
        loop_var: item

    - name: Check each item in 'cluster' for required properties based on 'type=iso'
      ansible.builtin.assert:
        that:
          - "item.package is defined and item.url is defined"
        fail_msg: "{{ iso_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'iso') | list }}"
      loop_control:
        loop_var: item

    - name: Check each item in 'cluster' for required properties based on 'type=manifest'
      ansible.builtin.assert:
        that:
          - "item.package is defined and item.url is defined"
        fail_msg: "{{ manifest_properties_fail_msg }}"
      loop: "{{ json_data.ansible_facts[file_basename].cluster | selectattr('type', 'equalto', 'manifest') | list }}"
      loop_control:
        loop_var: item

  rescue:
    - name: Handle validation failure
      ansible.builtin.fail:
        msg: "{{ validation_failure_msg }}"
