# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Set default bcm_roce_config_status
  ansible.builtin.set_fact:
    bcm_roce_input_status: false
    bcm_roce_config_status: false
    bcm_roce_src_input_status: false
    bcm_roce_src_config_status: false

- name: Check if bcm_roce_input_status is true
  ansible.builtin.set_fact:
    bcm_roce_input_status: "{{ software_config.softwares | selectattr('name', 'equalto', 'bcm_roce') | list | length > 0 }}"

- name: Check bcm_roce_json file status
  when: bcm_roce_input_status
  block:
    - name: Warning - Please wait, This task will take few seconds
      ansible.builtin.pause:
        seconds: "{{ warning_wait_time }}"
        prompt: "{{ subgroup_missing_warning_msg }}"
      when: software_config.bcm_roce is not defined

    - name: Check if bcm_roce_libraries_input_status is true
      ansible.builtin.set_fact:
        bcm_roce_src_input_status: "{{ software_config.bcm_roce | selectattr('name', 'equalto', 'bcm_roce_libraries') | list | length > 0 }}"
      when: software_config.bcm_roce is defined

    - name: Check that the software_config.json exists
      ansible.builtin.stat:
        path: "{{ bcm_roce_json_file }}"
      register: stat_result

    - name: Fail if bcm_roce.json file doesn't exist
      ansible.builtin.fail:
        msg: "{{ fail_msg_bcm_roce_json_file }}"
      when: not stat_result.stat.exists

    - name: Warning - Please wait, This task will take few seconds
      ansible.builtin.pause:
        seconds: "{{ warning_wait_time }}"
        prompt: "{{ subgroup_warning_msg }}"
      when: software_config.bcm_roce is defined and not bcm_roce_src_input_status|bool

    - name: Validate bcm_roce_json
      when: stat_result.stat.exists
      block:
        - name: Check JSON syntax of bcm_roce.json
          ansible.builtin.command:
            cmd: "jq . {{ bcm_roce_json_file }}"
          register: json_check
          ignore_errors: true
          changed_when: true

        - name: Display JSON errors of bcm_roce.json
          ansible.builtin.fail:
            msg: "{{ json_check.stderr_lines }}"
          when: json_check.rc != 0

        - name: Load bcm_roce.json
          ansible.builtin.include_vars:
            file: "{{ bcm_roce_json_file }}"
            name: bcm_roce_config

        - name: Check if url or path is defined in cluster variable
          ansible.builtin.set_fact:
            bcm_roce_config_status: true
          when: bcm_roce_config.bcm_roce.cluster[0].url != "" or bcm_roce_config.bcm_roce.cluster[0].path != ""

        - name: Fail if neither url nor path is not provided for bcm_roce.json file
          ansible.builtin.fail:
            msg: "{{ bcm_roce_fail_msg }}"
          when: not bcm_roce_config_status

        - name: Verify the bcm_roce_file_path
          when: bcm_roce_config.bcm_roce.cluster[0].path != ""
          block:
            - name: Verify the bcm_roce_file_path if path is specified in bcm_roce.json
              ansible.builtin.stat:
                path: "{{ bcm_roce_config.bcm_roce.cluster[0].path }}"
              register: result_path_bcm_roce_file

            - name: Fail if bcm_roce_file not exists
              ansible.builtin.fail:
                msg: "{{ bcm_roce_file_path_missing_msg }}"
              when: not result_path_bcm_roce_file.stat.exists

            - name: Fetch bcm_roce_version
              ansible.builtin.set_fact:
                bcm_roce_version: "{{ software_config.softwares | selectattr('name', 'equalto', 'bcm_roce') | map(attribute='version') | first }}"

            - name: Validate bcm_roce_file_path name
              ansible.builtin.assert:
                that:
                  - result_path_bcm_roce_file.stat.exists
                  - bcm_roce_config.bcm_roce.cluster[0].path | regex_search('\\.tar\\..*$')
                success_msg: "{{ bcm_roce_file_path_success_msg }}"
                fail_msg: "{{ bcm_roce_file_path_fail_msg }}"

            - name: Remove bcm_roce_temp files
              ansible.builtin.file:
                path: "{{ bcm_roce_driver_temp }}"
                state: absent
              failed_when: false

            - name: Create temp directory
              ansible.builtin.file:
                path: "{{ bcm_roce_driver_temp }}"
                state: directory
                mode: "{{ file_permission }}"

            - name: Extract bcm_roce_file_path
              ansible.builtin.unarchive:
                src: "{{ bcm_roce_config.bcm_roce.cluster[0].path }}"
                dest: "{{ bcm_roce_driver_temp }}"
              register: untar_bcm_roce_driver
              until: untar_bcm_roce_driver is not failed
              retries: "{{ max_retries }}"

            - name: Debug directory contents
              ansible.builtin.command:
                cmd: ls "{{ untar_bcm_roce_driver.dest }}"
              register: dir_contents
              ignore_errors: true
              changed_when: false

            - name: Validate bcm_roce_driver tarball
              ansible.builtin.assert:
                that:
                  - dir_contents.stdout | length > 0
                  - bcm_roce_version | string in dir_contents.stdout
                fail_msg: "The given tarball directory {{ dir_contents.stdout }} is mismatched with the bcm_roce version {{ bcm_roce_version }}"

            - name: Find files in the untared directory and subdirectories
              ansible.builtin.find:
                paths: "{{ untar_bcm_roce_driver.dest }}"
                patterns: "*netxtreme-peer-mem-dkms*.deb"
                recurse: true  # This option ensures the search includes subdirectories
              register: found_files

            - name: Fail if bcm_roce_driver not found
              ansible.builtin.fail:
                msg: "{{ bcm_roce_driver_fail_msg }}"
              when: not found_files.files

        - name: Warning - Please wait, This task will take few seconds
          ansible.builtin.pause:
            seconds: "{{ warning_wait_time }}"
            prompt: "{{ bcm_roce_libraries_warning_msg }}"
          when: bcm_roce_src_input_status|bool and bcm_roce_config.bcm_roce_libraries is not defined

        - name: Check bcm_roce_libraries validation in bcm_roce.json
          when: bcm_roce_src_input_status|bool and bcm_roce_config.bcm_roce_libraries is defined
          block:
            - name: Check if url or path is defined in cluster variable
              ansible.builtin.set_fact:
                bcm_roce_src_config_status: true
              when: bcm_roce_config.bcm_roce_libraries.cluster[0].url != "" or bcm_roce_config.bcm_roce_libraries.cluster[0].path != ""

            - name: Warning - Please wait, This task will take few seconds
              ansible.builtin.pause:
                seconds: "{{ warning_wait_time }}"
                prompt: "{{ bcm_roce_src_warning_msg }}"
              when: not bcm_roce_src_config_status

            - name: Verify the bcm_roce_libraries_file_path
              when: bcm_roce_config.bcm_roce_libraries.cluster[0].path != ""
              block:
                - name: Verify the bcm_roce_libraries_file_path if path is specified in bcm_roce.json
                  ansible.builtin.stat:
                    path: "{{ bcm_roce_config.bcm_roce_libraries.cluster[0].path }}"
                  register: result_path_bcm_roce_src_file

                - name: Fail if bcm_roce_libraries_file not exists
                  ansible.builtin.fail:
                    msg: "{{ bcm_roce_src_file_path_missing_msg }}"
                  when: not result_path_bcm_roce_src_file.stat.exists

                - name: Fetch bcm_roce_libraries_version
                  ansible.builtin.set_fact:
                    bcm_roce_src_version: "{{ software_config.bcm_roce | selectattr('name', 'equalto', 'bcm_roce_libraries') | map(attribute='version') | first }}" # noqa: yaml[line-length]

                - name: Validate bcm_roce_libraries_file_path name
                  ansible.builtin.assert:
                    that:
                      - result_path_bcm_roce_file.stat.exists
                      - bcm_roce_config.bcm_roce_libraries.cluster[0].path | regex_search('\\.tar\\..*$')
                    success_msg: "{{ bcm_roce_src_file_path_success_msg }}"
                    fail_msg: "{{ bcm_roce_src_file_path_fail_msg }}"

                - name: Remove bcm_roce_temp files
                  ansible.builtin.file:
                    path: "{{ bcm_roce_source_temp }}"
                    state: absent
                  failed_when: false

                - name: Create temp directory
                  ansible.builtin.file:
                    path: "{{ bcm_roce_source_temp }}"
                    state: directory
                    mode: "{{ file_permission }}"

                - name: Extract bcm_roce_libraries_file_path
                  ansible.builtin.unarchive:
                    src: "{{ bcm_roce_config.bcm_roce_libraries.cluster[0].path }}"
                    dest: "{{ bcm_roce_source_temp }}"
                  register: untar_bcm_roce_source
                  until: untar_bcm_roce_source is not failed
                  retries: "{{ max_retries }}"

                - name: Debug directory contents
                  ansible.builtin.command:
                    cmd: ls "{{ untar_bcm_roce_source.dest }}"
                  register: dir_contents
                  ignore_errors: true
                  changed_when: false

                - name: Validate bcm_roce_libraries tarball
                  ansible.builtin.assert:
                    that:
                      - dir_contents.stdout | length > 0
                      - bcm_roce_src_version | string in dir_contents.stdout
                    fail_msg: "The given tarball directory {{ dir_contents.stdout }} is mismatched with bcm_roce_libraries version {{ bcm_roce_src_version }}"

                - name: Find files in the untared directory and subdirectories
                  ansible.builtin.find:
                    paths: "{{ untar_bcm_roce_source.dest }}"
                    patterns: "{{ search_patterns }}"
                    recurse: true  # This option ensures the search includes subdirectories
                  register: found_files

                - name: Fail if bcm_roce_libraries not found
                  ansible.builtin.fail:
                    msg: "{{ bcm_roce_source_fail_msg }}"
                  when: not found_files.files
