# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Ping the powervault device to validate connectivity
  command: ping -c1 {{ inventory_hostname }}
  register: validate_login
  changed_when: false
  ignore_errors: yes

- name: Get auth string
  shell: echo -n {{ powervault_username }}_{{ powervault_password }} | sha256sum
  register: auth_string
  changed_when: false
  no_log: true
  ignore_errors: yes

- name: Get session key
  uri:
    url: https://{{ inventory_hostname }}/api/login/{{ auth_string.stdout | replace(" -", "") }}
    method: GET
    headers:
      {'datatype': 'json'}
    validate_certs: no
  register: session_key

- name: Execute show system command
  uri:
    url: https://{{ inventory_hostname }}/api/show/system
    method: GET
    body_format: json
    validate_certs: no
    use_proxy: no
    timeout: 60
    headers:
      {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
  register: system_info

- name: Get the product id
  set_fact:
    pv_id: "{{ system_info.json.system[0]['product-id'] }}"

- name: Verify the product id and model no. of device
  assert:
    that: ("ME4" in pv_id) or ("ME5" in pv_id)
    fail_msg: "{{ fail_pv_support }}"

- name: Verify the powervault version if ISCSI protocol selected
  assert:
    that: ("ME4" in pv_id)
    fail_msg: "{{ fail_iscsi_support }}"
  when: powervault_protocol == "iscsi"

- name: Set system name
  uri:
    url: https://{{ inventory_hostname }}/api/set/system/name/{{ powervault_system_name }}
    method: GET
    body_format: json
    validate_certs: no
    use_proxy: no
    headers:
      {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
  register: system_name
  when: powervault_system_name

- name: Check single controller mode
  uri:
    url: https://{{ inventory_hostname }}/api/show/controllers
    method: GET
    body_format: json
    validate_certs: no
    use_proxy: no
    headers:
      {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
  register: show_controller

- name: Create list of controllers
  set_fact:
    controller_no: "{{ controller_no | default ([]) }} + [ '{{ item['controller-id'] }}']"
  with_items: "{{ show_controller.json.controllers }}"
  no_log: true

- name: Assert the powervault_controller_mode when single
  assert:
    that:
      - powervault_controller_mode != "single"
    fail_msg: "{{ controller_wrong_value }}"
    success_msg: "{{ controller_success }}"
  when: controller_no | length > 1

- name: Assert the powervault_controller_mode when multi
  assert:
    that:
      - powervault_controller_mode != "multi"
    fail_msg: "{{ controller_wrong_value }}"
    success_msg: "{{ controller_success }}"
  when: controller_no | length == 1

- name: Enable single controller mode
  uri:
    url: https://{{ inventory_hostname }}/api/set/advanced-settings/single-controller
    method: GET
    body_format: json
    validate_certs: no
    use_proxy: no
    headers:
      {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
  register: single_controller
  when: powervault_controller_mode == "single"
