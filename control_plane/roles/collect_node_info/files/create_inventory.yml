# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Find reachable hosts
  hosts: node_inventory
  gather_facts: false
  ignore_unreachable: true
  ignore_errors: true
  tasks:
    - name: Ping for reachable hosts
      include_tasks: ping_check.yml

- name: Fetch omnia and awx config details
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Include vars file of inventory role
      include_vars: ../vars/main.yml

    - name: Fetch ansible-vault path
      command: whereis ansible-vault
      changed_when: false
      register: ansible_vault_path

    - name: Check if omnia config file is encrypted
      command: "cat {{ omnia_config_file }}"
      changed_when: false
      register: config_content
      no_log: true

    - name: Decrpyt omnia_config.yml
      command: >-
        {{ ansible_vault_path.stdout.split(' ')[1] }} decrypt "{{ omnia_config_file }}"
        --vault-password-file "{{ omnia_config_vault_file }}"
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"

    - name: Include vars file of inventory role
      include_vars: "{{ omnia_config_file }}"
      no_log: true

    - name: Encrypt omnia_config.yml file
      command: >-
        {{ ansible_vault_path.stdout.split(' ')[1] }} encrypt "{{ hostvars['localhost']['omnia_config_file'] }}"
        --vault-password-file "{{ hostvars['localhost']['omnia_config_vault_file'] }}"
      changed_when: false

    - name: Update omnia_config.yml permissions
      file:
        path: "{{ hostvars['localhost']['omnia_config_file'] }}"
        mode: "{{ hostvars['localhost']['file_perm'] }}"

    - name: Fetch AWX credentials
      include_tasks: fetch_awx_credentials.yml
      when: hostvars['localhost']['awx_web_support']

- name: Set hostname for reachable nodes and gather facts
  hosts: reachable
  gather_facts: False
  ignore_unreachable: true
  remote_user: "{{ host_username }}"
  vars:
    ansible_password: "{{ host_password }}"
    ansible_become_pass: "{{ host_password }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    mapping_file_present: ""
  tasks:
    - name: Setup
      setup:
       filter: ansible_*

    - name: Check hostname of server
      command: hostname
      register: hostname_check
      changed_when: false
      failed_when: false
      
    - name: Check if IP is present in mapping file
      command: grep "{{ inventory_hostname }}" ../../provision_cobbler/files/new_host_mapping_file.csv
      delegate_to: localhost
      register: file_present
      when: mapping_file | bool
      failed_when: false

    - name: Set fact if mapping file is present
      set_fact:
        mapping_file_present: "{{ file_present.stdout }}"
      when: mapping_file | bool
      failed_when: false

    - name: Get the static hostname from mapping file
      shell: awk -F',' '$3 == "{{ inventory_hostname }}" { print $2 }' ../../provision_cobbler/files/new_host_mapping_file.csv
      delegate_to: localhost
      when: 
        - ( hostname_check.stdout is defined )
        - ( 'localhost' in hostname_check.stdout ) 
        - ( mapping_file_present | length > 1  ) 
        - ( mapping_file | bool )
      register: host_name
      failed_when: false

    - name: Set the hostname from mapping file
      command: hostnamectl set-hostname "{{ host_name.stdout + '.' + hostvars['localhost']['domain_name'] }}"
      when: 
        - ( hostname_check.stdout is defined )
        - ( 'localhost' in hostname_check.stdout ) 
        - ( mapping_file_present | length > 1 ) 
        - ( mapping_file | bool )
      failed_when: false

    - name: Set the hostname if hostname not present mapping file
      command: hostnamectl set-hostname "compute{{ inventory_hostname.split('.')[-2] + '-' + inventory_hostname.split('.')[-1] + '.' + hostvars['localhost']['domain_name'] }}"
      when: 
        - ( hostname_check.stdout is defined )
        - ( 'localhost' in hostname_check.stdout )
        - ( file_present.rc is defined ) 
        - ( file_present.rc != 0 ) 
        - ( mapping_file | bool )
      failed_when: false

    - name: Set the system hostname if mapping file not present
      command: hostnamectl set-hostname "compute{{ inventory_hostname.split('.')[-2] + '-' + inventory_hostname.split('.')[-1]+'.'+ hostvars['localhost']['domain_name'] }}"
      when: 
        - ( hostname_check.stdout is defined )
        - ( 'localhost' in hostname_check.stdout ) 
        - ( not mapping_file | bool )
      failed_when: false

    - name: Add new hostname to /etc/hosts from mapping file
      lineinfile:
        dest: /etc/hosts
        line: "{{ inventory_hostname }} {{ host_name.stdout + '.' + hostvars['localhost']['domain_name'] }}"
        state: present
      when: 
        - ( hostname_check.stdout is defined )
        - ( 'localhost' in hostname_check.stdout ) 
        - ( mapping_file_present | length > 1 ) 
        - ( mapping_file | bool )
      failed_when: false

    - name: Add new hostname to /etc/hosts if hostname not present mapping file
      lineinfile:
        dest: /etc/hosts
        line: "{{ inventory_hostname }} compute{{ inventory_hostname.split('.')[-2] + '-' + inventory_hostname.split('.')[-1]+'.'+ hostvars['localhost']['domain_name'] }}"
        state: present
      when: 
        - ( hostname_check.stdout is defined )
        - ( 'localhost' in hostname_check.stdout )
        - ( file_present.rc is defined ) 
        - ( file_present.rc != 0 ) 
        - ( mapping_file | bool )
      failed_when: false

    - name: Add new hostname to /etc/hosts if mapping file not present
      lineinfile:
        dest: /etc/hosts
        line: "{{ inventory_hostname }} compute{{ inventory_hostname.split('.')[-2] + '-' + inventory_hostname.split('.')[-1] +'.'+ hostvars['localhost']['domain_name'] }}"
        state: present
      when: 
        - ( hostname_check.stdout is defined )
        - ( 'localhost' in hostname_check.stdout ) 
        - ( not mapping_file | bool )
      failed_when: false

    - name: Initialize service tag
      set_fact:
        service_tag: "Not Found"

    - name: Install dmidecode package
      package:
        name: dmidecode
        state: present

    - name: Get service tag
      shell: >
          set -o pipefail && \
          dmidecode -t 1 | grep Serial
      changed_when: false
      failed_when: false
      register: service_tag_details
      when: hostname_check.stdout is defined

    - name: Set fact service tag
      set_fact:
        service_tag: "{{ service_tag_details.stdout.split(':')[1].strip() }}"
      when: service_tag_details.stdout is defined

- name: Update inventory
  hosts: reachable
  connection: local
  gather_facts: false
  tasks:
    - name: Fetch ansible-vault path
      command: whereis ansible-vault
      changed_when: false
      register: ansible_vault_path
      delegate_to: localhost

    - name: Initialize prov_hosts_list
      set_fact:
        prov_hosts_list: ""

    - name: Fetch facts and add new hosts in AWX
      include_tasks: add_host_awx.yml
      when: hostvars['localhost']['awx_web_support']

    - name: Fetch facts and add new hosts in CLI
      include_tasks: add_host_cli.yml
      when: not hostvars['localhost']['awx_web_support']
      
    - name: Device inventory formation when share lom
      block:
        - name: Include vars from collect device info
          include_vars: "{{ playbook_dir }}/../../collect_device_info/vars/main.yml"

        - name: Install paramiko
          command: pip3 install paramiko -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
          delegate_to: localhost
          changed_when: false
 
        - name: Initialize variables
          set_fact:
            idrac_inventory_status: false
            ethernet_inventory_status: false
            ib_inventory_status: false
            powervault_status: false
            idrac_hosts_output: ""
            ethernet_switches_output: ""
            infiniband_switches_output: ""
            powervault_storage_output: ""
            awx_web_support: "{{ hostvars['localhost']['awx_web_support'] }}"

        - name: Set AWX variables
          set_fact:
            awx_host: "{{ hostvars['localhost']['awx_host'] }}"
            awx_username: "{{ hostvars['localhost']['awx_username'] }}"
            awx_password: "{{ hostvars['localhost']['awx_password'] }}"
          when: awx_web_support

        - name: Add devices to ethernet_inventory
          include_tasks: "{{ playbook_dir }}/../../collect_device_info/files/add_ethernet_inventory.yml"

        - name: Add devices to infiniband_inventory
          include_tasks: "{{ playbook_dir }}/../../collect_device_info/files/add_infiniband_inventory.yml"

        - name: Add devices to powervault_inventory
          include_tasks: "{{ playbook_dir }}/../../collect_device_info/files/add_powervault_inventory.yml"
      when: 
        - hostvars['localhost']['network_interface_type'] == "lom"
        - inventory_hostname not in prov_hosts_list

- name: Cleanup inventory
  hosts: unreachable
  connection: local
  gather_facts: false
  tasks:
    - name: Remove unreachable hosts in AWX
      include_tasks: remove_host_awx.yml
      when: hostvars['localhost']['awx_web_support']

    - name: Remove unreachable hosts in CLI
      include_tasks: remove_host_cli.yml
      when: not hostvars['localhost']['awx_web_support']

- name: Setup passwordless ssh from control plane to all nodes
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Invoke cluster_preparation role
      include_role:
        name: "{{ playbook_dir }}/../../../tools/roles/cluster_preperation"
      vars:
        ssh_to: "{{ groups['reachable'] }}"
      when: not hostvars['localhost']['awx_web_support']
