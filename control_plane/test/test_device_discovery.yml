# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
--- 

# Test case to verify inventory groups are present in AWX UI  (idrac, ethernet, inifiniband, powervault)  
- name: OMNIA_1.3_Device_Discovery_TC_005   
  hosts: localhost
  connection: local
  
  vars_files:
   - test_vars/test_device_discovery_vars.yml
   - ../input_params/base_vars.yml
  tasks:                 

   - name: Execute get pods command
     command: "kubectl get pods -n {{ awx_namespace }}"
     changed_when: true
     register: k8s_pods
     run_once: true
     ignore_errors: true
     tags: TC_005    
     
   - name: Get awx pod 
     set_fact:
      awx_pods: "{{ item | regex_search(awx_pod_regex) | trim  }}"
      idrac_status: true
     with_items: 
       - "{{ k8s_pods.stdout_lines }}"
     run_once: true
     when: item | regex_search(awx_pod_item_regex)
     tags: TC_005

   - name: Get awx cluster ip
     shell: "kubectl get svc awx-ui -n {{ awx_namespace }} -o jsonpath='{.spec.clusterIP}'"
     register: awx_cluster_ip
     changed_when: false
     ignore_errors: true
     tags: TC_005

   - name: Get AWX admin password
     shell: "kubectl get secret awx-admin-password -n {{ awx_namespace }} -o jsonpath='{.data.password}' | base64 --decode"
     register: awx_admin_password
     changed_when: false
     ignore_errors: true
     tags: TC_005
          
   - name: Execute awx get inventory hosts command
     command: "awx --conf.host http://{{ awx_cluster_ip.stdout }}:8052 --conf.username admin --conf.password {{ awx_admin_password.stdout }} --conf.insecure hosts list --inventory {{ item }} -f human --filter 'name'"
     register: idrac_hosts
     with_items:
      - "idrac_inventory"
      - "infiniband_inventory"
      - "ethernet_inventory"
      - "powervault_inventory"
     run_once: true
     changed_when: false
     tags: TC_005        
       
   - name: Verify  inventory are present in AWX UI  
     assert:
      that: 
       - item.stdout_lines[0] | regex_search("name")
      fail_msg: "{{ item.item }} - {{ inventory_fail_msg }}"
      success_msg: "{{ item.item }} - {{ inventory_success_msg }}"
     with_items:
      - "{{ idrac_hosts.results }}"
     changed_when: false
     tags: TC_005

# Test case to validate iDRAC Devices
- name: OMNIA_1.3_Device_Discovery_TC_007    
  hosts: localhost
  connection: local
  
  vars_files:
   - test_vars/test_inventory_vars.yml
   - ../input_params/base_vars.yml  
  tasks:

   - name: Execute get pods command
     command: "kubectl get pods -n {{ awx_namespace }}"
     changed_when: true
     register: k8s_pods
     run_once: true
     ignore_errors: true
     tags: TC_007     
     
   - name: Get awx pod 
     set_fact:
      awx_pods: "{{ item | regex_search(awx_pod_regex) | trim  }}"
     with_items: 
       - "{{ k8s_pods.stdout_lines }}"
     run_once: true
     when: item | regex_search(awx_pod_item_regex)
     changed_when: false
     tags: TC_007

   - name: Get awx cluster ip
     shell: "kubectl get svc awx-ui -n {{ awx_namespace }} -o jsonpath='{.spec.clusterIP}'"
     register: awx_cluster_ip
     changed_when: false
     tags: TC_007

   - name: Get AWX admin password
     shell: "kubectl get secret awx-admin-password -n {{ awx_namespace }} -o jsonpath='{.data.password}' | base64 --decode"
     register: awx_admin_password
     changed_when: false
     ignore_errors: true
     tags: TC_007

   - name: Execute awx get inventory hosts command
     command: "awx --conf.host http://{{ awx_cluster_ip.stdout }}:8052 --conf.username admin --conf.password {{ awx_admin_password.stdout }} --conf.insecure hosts list --inventory {{ idrac_inventory_name }} -f human --filter 'name'"
     changed_when: true
     register: idrac_hosts
     run_once: true
     tags: TC_007     
     
   - name: List of iDRAC host
     include_tasks: "{{ validation_script_path ​}}"	
     with_items:
      - "{{ idrac_hosts.stdout_lines[2:] }}"
     when: idrac_hosts.stdout_lines | length > 2
     ignore_errors: true
     tags: TC_007
     
   - name: Empty iDRAC hosts
     debug:
      msg: "{{ empty_host_err }}"
     when: idrac_hosts.stdout_lines | length < 3
     failed_when: false
     tags: TC_007     

# Test case to validate Infiniband Devices    
- name: OMNIA_1.3_Device_Discovery_TC_002    
  hosts: localhost
  connection: local
  
  vars_files:
   - test_vars/test_inventory_vars.yml
   - ../input_params/base_vars.yml  
  tasks:

   - name: Execute get pods command
     command: "kubectl get pods -n {{ awx_namespace }}"
     changed_when: true
     register: k8s_pods
     run_once: true
     ignore_errors: true
     tags: TC_002     
     
   - name: Get awx pod 
     set_fact:
      awx_pods: "{{ item | regex_search(awx_pod_regex) | trim  }}"
     with_items: 
       - "{{ k8s_pods.stdout_lines }}"
     run_once: true
     when: item | regex_search(awx_pod_item_regex)
     changed_when: false
     tags: TC_002

   - name: Get awx cluster ip
     shell: "kubectl get svc awx-ui -n {{ awx_namespace }} -o jsonpath='{.spec.clusterIP}'"
     register: awx_cluster_ip
     changed_when: false
     tags: TC_002

   - name: Get AWX admin password
     shell: "kubectl get secret awx-admin-password -n {{ awx_namespace }} -o jsonpath='{.data.password}' | base64 --decode"
     register: awx_admin_password
     changed_when: false
     ignore_errors: true
     tags: TC_002

   - name: Execute awx get inventory hosts command
     command: "awx --conf.host http://{{ awx_cluster_ip.stdout }}:8052 --conf.username admin --conf.password {{ awx_admin_password.stdout }} --conf.insecure hosts list --inventory {{ ib_inventory_name }} -f human --filter 'name'"
     changed_when: true
     register: infiniband_hosts
     run_once: true
     ignore_errors: true
     tags: TC_002     
     
   - name: List of infiniband hosts
     include_tasks: "{{ validation_script_path ​}}"	  
     with_items:
      - "{{ infiniband_hosts.stdout_lines[2:] }}"
     when: infiniband_hosts.stdout_lines | length > 2
     ignore_errors: true
     tags: TC_002
     
   - name: Empty infiniband hosts
     debug:
      msg: "{{ empty_host_err }}"
     when: infiniband_hosts.stdout_lines | length < 3
     failed_when: false
     tags: TC_002 

# Test case to validate Ethernet Devices
- name: OMNIA_1.3_Device_Discovery_TC_001    
  hosts: localhost
  connection: local
  
  vars_files:
   - test_vars/test_inventory_vars.yml
   - ../input_params/base_vars.yml  
  tasks:

   - name: Execute get pods command
     command: "kubectl get pods -n {{ awx_namespace }}"
     changed_when: true
     register: k8s_pods
     run_once: true
     ignore_errors: true
     tags: TC_001     
     
   - name: Get awx pod 
     set_fact:
      awx_pods: "{{ item | regex_search(awx_pod_regex) | trim  }}"
     with_items: 
       - "{{ k8s_pods.stdout_lines }}"
     run_once: true
     when: item | regex_search(awx_pod_item_regex)
     changed_when: false
     tags: TC_001

   - name: Get awx cluster ip
     shell: "kubectl get svc awx-ui -n {{ awx_namespace }} -o jsonpath='{.spec.clusterIP}'"
     register: awx_cluster_ip
     changed_when: false
     tags: TC_001

   - name: Get AWX admin password
     shell: "kubectl get secret awx-admin-password -n {{ awx_namespace }} -o jsonpath='{.data.password}' | base64 --decode"
     register: awx_admin_password
     changed_when: false
     ignore_errors: true
     tags: TC_001

   - name: Execute awx get inventory hosts command
     command: "awx --conf.host http://{{ awx_cluster_ip.stdout }}:8052 --conf.username admin --conf.password {{ awx_admin_password.stdout }} --conf.insecure hosts list --inventory {{ ethernet_inventory_name }} -f human --filter 'name'"
     changed_when: true
     register: ethernet_hosts
     run_once: true
     ignore_errors: true
     tags: TC_001     
     
   - name: List of ethernet hosts
     include_tasks: "{{ validation_script_path ​}}"	    
     with_items:
      - "{{ ethernet_hosts.stdout_lines[2:] }}"
     when: ethernet_hosts.stdout_lines | length > 2
     ignore_errors: true
     tags: TC_001
     
   - name: Empty ethernet hosts
     debug:
      msg: "{{ empty_host_err }}"
     when: ethernet_hosts.stdout_lines | length < 3
     failed_when: false
     tags: TC_001

# Test case to validate Powervault Devices      
- name: OMNIA_1.3_Device_Discovery_TC_003    
  hosts: localhost
  connection: local
  
  vars_files:
   - test_vars/test_inventory_vars.yml
   - ../input_params/base_vars.yml  
  tasks:

   - name: Execute get pods command
     command: "kubectl get pods -n {{ awx_namespace }}"
     changed_when: true
     register: k8s_pods
     run_once: true
     ignore_errors: true
     tags: TC_003     
     
   - name: Get awx pod 
     set_fact:
      awx_pods: "{{ item | regex_search(awx_pod_regex) | trim  }}"
     with_items: 
       - "{{ k8s_pods.stdout_lines }}"
     run_once: true
     when: item | regex_search(awx_pod_item_regex)
     changed_when: false
     tags: TC_003

   - name: Get awx cluster ip
     shell: "kubectl get svc awx-ui -n {{ awx_namespace }} -o jsonpath='{.spec.clusterIP}'"
     register: awx_cluster_ip
     changed_when: false
     tags: TC_003

   - name: Get AWX admin password
     shell: "kubectl get secret awx-admin-password -n {{ awx_namespace }} -o jsonpath='{.data.password}' | base64 --decode"
     register: awx_admin_password
     changed_when: false
     ignore_errors: true
     tags: TC_003

   - name: Execute awx get inventory hosts command
     command: "awx --conf.host http://{{ awx_cluster_ip.stdout }}:8052 --conf.username admin --conf.password {{ awx_admin_password.stdout }} --conf.insecure hosts list --inventory {{ pv_inventory_name }} -f human --filter 'name'"
     changed_when: true
     register: powervault_hosts
     run_once: true
     ignore_errors: true
     tags: TC_003     
     
   - name: List of powervault hosts
     include_tasks: "{{ validation_script_path ​}}"	  
     with_items:
      - "{{ powervault_hosts.stdout_lines[2:] }}"
     when: powervault_hosts.stdout_lines | length > 2
     ignore_errors: true
     tags: TC_003
     
   - name: Empty powervault hosts
     debug:
      msg: "{{ empty_host_err }}"
     when: powervault_hosts.stdout_lines | length < 3
     failed_when: false
     tags: TC_003     