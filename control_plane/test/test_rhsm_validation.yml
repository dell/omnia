#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- block:

  # RHEL_TC_01
  # Test Case to validate the subscription_manager staus and all the valid parameters for redhat_subscription_method as portal or Satellite

  #check redhat_subscription_method
    - name: Check redhat_subscription_method
      shell: "subscription-manager status | grep 'Overall'"
      register: status
      when: redhat_subscription_method == "Portal" or "Satellite"

    - name: Verify status
      assert:
        that:
        - '"Overall Status: Current" in "{{ status.stdout }}"'
        success_msg: "{{subscription_manager_success_msg}}"
        fail_msg: "{{subscription_manager_fail_msg}}"    

  #check redhat_subscription_server_hostname
    - name: Check redhat_subscription_server_hostname
      shell: "cat {{rhsm_conf_path}} | grep 'hostname ='"
      register: hostname

    - name: Verify redhat_subscription_server_hostname
      assert:
        that:
        - 'redhat_subscription_server_hostname in "{{ hostname.stdout }}"'
        success_msg: "{{hostname_success_msg}}"
        fail_msg: "{{hostname_fail_msg}}"  

 #check redhat_subscription_redhat_subscription_port
    - name: Check redhat_subscription_port
      shell: "cat {{redhat_subscription_conf_path}} | grep 'port ='"
      register: port

    - name: Verify redhat_subscription_port
      assert:
        that:
        - port.stdout.split()[2] | int == redhat_subscription_port
        success_msg: "{{port_success_msg}}"
        fail_msg: "{{port_fail_msg}}"       

  #redhat_subscription_baseurl

    - name: Check baseurl
      shell: "cat {{redhat_subscription_conf_path}} | grep 'baseurl ='"
      register: baseurl

    - name: Verify redhat_subscription_baseurl
      assert:
        that:
          - 'redhat_subscription_baseurl in "{{ baseurl.stdout }}"'
        success_msg: "{{baseurl_success_msg}}"
        fail_msg: "{{baseurl_fail_msg}}"    

 #redhat_subscription_insecure

    - name: Check redhat_subscription_insecure
      shell: "cat {{redhat_subscription_conf_path}} | grep 'insecure'"
      register: insecure

    - name: Verify redhat_subscription_insecure_true
      assert:
        that:
          - "'insecure = 1' in insecure.stdout"
        success_msg: "{{insecure_success_msg}}"
        fail_msg: " {{insecure_fail_msg}}"
      when: redhat_subscription_insecure == true

    - name: Verify redhat_subscription_insecure_false
      assert:
        that:
          - "'insecure = 0' in insecure.stdout"
        success_msg: "{{insecure_success_msg}}"
        fail_msg: " {{insecure_fail_msg}}"
      when: redhat_subscription_insecure == false

  #redhat_subscription_manage_repos

    - name: Check redhat_subscription_manage_repos
      shell: "cat {{redhat_subscription_conf_path}} | grep 'manage_repos'"
      register: repos

    - name: Verify redhat_subscription_manage_repos_true
      assert:
        that:
          - 'manage_repos = 1 in repos.stdout'
        success_msg: "{{manage_repos_success_msg}}"
        fail_msg: " {{manage_repos_fail_msg}}"
      when: redhat_subscription_manage_repos == true

    - name: Verify redhat_subscription_manage_repos_false
      assert:
        that:
          - 'manage_repos = 0 in repos.stdout'
        success_msg: "{{manage_repos_success_msg}}"
        fail_msg: " {{manage_repos_fail_msg}}"
      when: redhat_subscription_manage_repos == false

 #redhat_subscription_cert_check_interval

    - name: Check cert_check_interval
      shell: "cat {{redhat_subscription_conf_path}} | grep 'certCheckInterval ='"
      register: cert_check_interval

    - name: split and verify cert_check_interval
      assert:
        that:
          - cert_check_interval.stdout.split()[2] | int == redhat_subscription_cert_check_interval
        success_msg: "{{cert_check_int_success_msg}}"
        fail_msg: "{{cert_check_int_fail_msg}}"

  #redhat_subscription_auto_attach_interval

    - name: Check auto_attach_interval
      shell: "cat {{redhat_subscription_conf_path}} | grep 'autoAttachInterval ='"
      register: auto_attach_interval

    - name: Verify auto_attach_interval
      assert:
        that:
          - auto_attach_interval.stdout.split()[2] | int == redhat_subscription_auto_attach_interval
        success_msg: "{{auto_attach_int_success_msg}}"
        fail_msg: "{{auto_attach_int_fail_msg}}"

  #redhat_subscription_ssl_verify_depth

    - name: Check ssl_verify_depth
      shell: "cat {{redhat_subscription_conf_path}} | grep 'ssl_verify_depth ='"
      register: ssl_verify_depth

    - name: Verify ssl_verify_depth
      assert:
        that:
          - 'redhat_subscription_ssl_verify_depth == ssl_verify_depth.stdout.split()[2] | int'
        success_msg: "{{ssl_success_msg}}"
        fail_msg: "{{ssl_fail_msg}}"

  #redhat_subscription_full_refresh_on_yum 

    - name: Check redhat_subscription_full_refresh_on_yum 
      shell: "cat {{redhat_subscription_conf_path}} | grep 'full_refresh_on_yum'"
      register: full_refresh_on_yum

    - name: Verify redhat_subscription_full_refresh_on_yum_true
      assert:
        that:
          - "'full_refresh_on_yum = 1' in full_refresh_on_yum.stdout"
        success_msg: "{{full_refresh_success_msg}}"
        fail_msg: " {{full_refresh_fail_msg}}"
      when: redhat_subscription_full_refresh_on_yum == true  

    - name: Verify redhat_subscription_full_refresh_on_yum_false
      assert:
        that:
          - "'full_refresh_on_yum = 0' in full_refresh_on_yum.stdout"
        success_msg: "{{full_refresh_success_msg}}"
        fail_msg: " {{full_refresh_fail_msg}}"
      when: redhat_subscription_full_refresh_on_yum == false

  #redhat_subscription_report_package_profile

    - name: Check redhat_subscription_report_package_profile
      shell: "cat {{redhat_subscription_conf_path}} | grep 'report_package_profile'"
      register: report_package_profile

    - name: Verify redhat_subscription_report_package_profile_true
      assert:
        that:
          - "'report_package_profile = 1' in report_package_profile.stdout"
        success_msg: "{{report_package_success_msg}}"
        fail_msg: "{{report_package_fail_msg}}"
      when: redhat_subscription_report_package_profile == true  

    - name: Verify redhat_subscription_report_package_profile_false
      assert:
        that:
          - "'report_package_profile = 0' in report_package_profile.stdout"
        success_msg: "{{report_package_success_msg}}"
        fail_msg: "{{report_package_fail_msg}}"
      when: redhat_subscription_report_package_profile == false    
      tags: TC_01       

- block:
# Testcase RHEL_TC_02
# Test Case to validate the execution of Control_plane.yml and check if method is Portal then Username and password is not null

    - name: Check redhat_subscription_method
      shell: "subscription-manager status | grep 'Overall'"
      register: status
      when: redhat_subscription_method == "Portal" or "Satellite"

    - name: Verify status
      assert:
        that:
        - '"Overall Status: Current" in "{{ status.stdout }}"'
      success_msg: "{{subscription_manager_success_msg}}"
      fail_msg: "{{subscription_manager_fail_msg}}"   

    - name: Check_redhat_subscription_method
      assert:
        that: 
          - 'redhat_subscription_username != "null" '
          - 'redhat_subscription_password != "null" '
        success_msg: "{{username_password_success_msg}}"
        fail_msg: "{{username_password_fail_msg}}"
      when: redhat_subscription_method == "Portal"
      debug:
        success_msg: "{{method_portal_success_msg}}"
        fail_msg: "{{method_portal_fail_msg}}"
      tags: TC_02

- block:
# Testcase RHEL_TC_03
# Test Case to validate the execution of Control_plane.yml and check if method is Satellite then activation Key is not null

  #check redhat_subscription_method
    - name: Check redhat_subscription_method
      shell: "subscription-manager status | grep 'Overall'"
      register: status
      when: redhat_subscription_method == "Portal" or "Satellite"

    - name: Verify status
      assert:
        that:
        - '"Overall Status: Current" in "{{ status.stdout }}"'
        success_msg: "{{subscription_manager_success_msg}}"
        fail_msg: "{{subscription_manager_fail_msg}}"  

    - name: Check_redhat_subscription_method
      assert:
        that: 
        - 'redhat_subscription_activation_key != "null" '
        - 'redhat_subscription_org_id != "null" '
        success_msg: "{{activation_key_org_success_msg}}"
        fail_msg: "{{activation_key_org_fail_msg}}"
        when: redhat_subscription_method == "Satellite"
        debug:
          success_msg: "{{method_satellite_success_msg}}"
          fail_msg: "{{method_satellite_fail_msg}}"
        tags: TC_03