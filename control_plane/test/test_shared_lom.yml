#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---
## TESTCASES FOR DEDICATED MANAGEMENT NIC ##

# Testcase to validate presence of management network container
- name: OMNIA_1.2.1_NETWORK_TC_001
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate dhcpd.leases is not empty
      block:
        - name: Get all pods
          command: "kubectl get pods -A"
          register: all_pod_info

        - name: Validate presence of management network container
          assert:
            that:
              - "'{{ mgmt_keyword }}' in all_pod_info.stdout"
            success_msg: "{{ mgmt_container_present_success_msg }}"
            fail_msg: "{{ mgmt_container_present_fail_msg }}"
      when: ( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )
      tags: TC_NTWK_001

# Testcase to validate whether dhcpd.leases is empty or not for both dedicated and shared LOM with roce
- name: OMNIA_1.2.1_NETWORK_TC_002l
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate dhcpd.leases is not empty
      block:
        - name: Get network-config pods
          command: kubectl get pods -n {{ network_config_ns }}
          register: network_config_pods

        - name: Get pods in management network container
          set_fact:
            mgmt_pod_info: "{{ item }}"
          with_items:
            - "{{ network_config_pods.stdout_lines }}"
          when: item | regex_search(mgmt_keyword)

        - name: Get management network pod
          shell: echo {{ mgmt_pod_info }} | awk '{print $1}'
          register: mgmt_pod

        - name: Get dhcpd.leases file from management network container
          shell: 'kubectl exec -it {{ mgmt_pod.stdout }} -n {{ network_config_ns }} -- cat {{ mgmt_dhcpd_container_file_path }} > {{ temp_dhcpd_path }}'
      
        - name: Validate dhcpd.leases file is empty or not
          shell: 'cat {{ temp_dhcpd_path }} | wc -l'
          register: mgmt_dhcpd_file_count

        - name: Delete temp file created
          file:
            path: "{{ temp_dhcpd_path }}"
            state: absent
      
        - name: Validate dhcpd.leases is not empty
          assert:
            that:
              - mgmt_dhcpd_file_count.stdout | int > 0
            success_msg: "{{ mgmt_dhcpd_not_empty_msg }}"
            fail_msg: "{{ mgmt_dhcpd_empty_msg }}"
          when: (( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )) or (( network_interface_type == "lom" ) and ( mgmt_network_nic == host_network_nic ) and (roce_network_nic != ""))
      tags: TC_NTWK_002

# Testcase to validate whether mgmt_provisioned_hosts.yml exists for both dedicated and shared LOM management
- name: OMNIA_1.2.1_NETWORK_TC_003
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate presence of mgmt_provisoned_hosts.yml
      block:
        - name: Validate presence of mgmt_provisioned_hosts.yml
          stat:
            path: "{{ mgmt_hosts_file_path }}"
          register: mgmt_prov_hosts_file

        - name: Print if exists
          assert:
            that:
              - mgmt_prov_hosts_file.stat.exists
            success_msg: "{{ mgmt_prov_hosts_exists_msg }}"
            fail_msg: "{{ mgmt_prov_hosts_fail_msg }}"
      when: (( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )) 
      or (( network_interface_type == "lom" ) and ( mgmt_network_nic == host_network_nic ))
      tags: "TC_NTWK_003"

# Testcase to validate mgmt_provisioned_hosts.yml
- name: OMNIA_1.2.1_NETWORK_TC_004
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate mgmt_provisioned_hosts.yml is not empty
      block:
        - name: Get mgmt_provisioned_hosts.yml content
          shell: 'cat {{ mgmt_hosts_file_path }} > {{ temp_mgmt_hosts_file_path }}'

        - name: Remove blank lines from the file
          lineinfile:
            path: "{{ temp_mgmt_hosts_file_path }}"
            regexp: '^\s*$'
            state: absent

        - name: Validate mgmt_provisioned_hosts.yml
          shell: 'cat {{ temp_mgmt_hosts_file_path }} | wc -l'
          register: mgmt_host_count

        - name: Delete temp file created
          file:
            path: "{{ temp_mgmt_hosts_file_path }}"
            state: absent
          
        - name: Assert whether mgmt_provisioned_hosts.yml is empty or not
          assert:
            that:
              - mgmt_host_count.stdout | int > 0
            success_msg: "{{ mgmt_hosts_not_empty_msg }}"
            fail_msg: "{{ mgmt_hosts_empty_msg }}"
      when: ( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )
      tags: TC_NTWK_004

# Testcase to validate mgmt_provisioned_hosts.yml has no repetetion of IPs in same line
- name: OMNIA_1.2.1_NETWORK_TC_005
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate mgmt_provisioned_hosts.yml has no repetetion of IPs in same line
      block:
        - name: Get mgmt_provisioned_hosts.yml content
          shell: 'cat {{ mgmt_hosts_file_path }} > {{ temp_mgmt_hosts_file_path }}'

        - name: Remove blank lines from the file
          lineinfile:
            path: "{{ temp_mgmt_hosts_file_path }}"
            regexp: '^\s*$'
            state: absent

        - name: Get the content of mgmt_provisioned_hosts.yml without blank lines
          shell: 'cat {{ temp_mgmt_hosts_file_path }}'
          register: mgmt_hosts_list

        - name: Get IP count from mgmt_provisioned_list.yml
          shell: 'cat {{ temp_mgmt_hosts_file_path }} | wc -l'
          register: mgmt_provisioned_host_count
          
        - name: Validate occurence of IPs in mgmt_provisioned_hosts.yml
          shell: 'echo "{{ item }}" >> {{ temp_host_list_path }}'
          with_items:
            - "{{ mgmt_hosts_list.stdout_lines }}"
          when: item | regex_search('^([0-9]{1,3}\.){3}[0-9]{1,3}$')
    
        - name: Get count of temp_host_list.txt
          shell: 'cat {{ temp_host_list_path }} | wc -l'
          register: temp_mgmt_provisioned_host_count

        - name: Delete temp file created
          file:
            path: "{{ temp_mgmt_hosts_file_path }}"
            state: absent
    
        - name: Validate IP repetition in mgmt_provisioned_hosts.yml
          assert:
            that:
              - temp_mgmt_provisioned_host_count.stdout | int == mgmt_provisioned_host_count.stdout | int
            success_msg: "no IP repetition"
            fail_msg: "IP is repeated"
      when: ( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )
      tags: TC_NTWK_005

# Testcase to validate whether IP is between given range
- name: OMNIA_1.2.1_NETWORK_TC_006
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate whether identified device IPs are within user defined range
      block:
        - name: Integer value of start range
          shell: "echo {{ mgmt_network_dhcp_start_range | ansible.netcommon.ipaddr('address') | ansible.netcommon.ipaddr('int') }}"
          register: start_range_ip_int

        - name: Integer value of end range
          shell: "echo {{ mgmt_network_dhcp_end_range | ansible.netcommon.ipaddr('address') | ansible.netcommon.ipaddr('int') }}"
          register: end_range_ip_int

        - name: Get inventory IPs for processing
          shell: 'cat {{ mgmt_hosts_file_path }} > {{ temp_mgmt_hosts_file_path }}'

        - name: Remove blank lines from the inventory file
          lineinfile:
            path: "{{ temp_mgmt_hosts_file_path }}"
            regexp: '^\s*$'
            state: absent

        - name: Get the inventory IPs without blank lines
          shell: 'cat {{ temp_mgmt_hosts_file_path }}'
          register: ip_list

        - name: Convert source IPs to integers and push them to source_ip_list.txt
          shell: "echo {{ item | ansible.netcommon.ipaddr('address') | ansible.netcommon.ipaddr('int') }} >> {{ sample_ip_integer_file_path }}"
          with_items:
            - "{{ ip_list.stdout_lines }}"

        - name: Get the integer values of source IPs
          shell: "cat source_ip_list.txt"
          register: ip_integers

        - name: Push only the IP to target_ip_list.txt which is within the given start and end range
          shell: "echo {{ item | ansible.netcommon.ipaddr('int') | ansible.netcommon.ipaddr('address') }} >> {{ sample_target_file_path }}"
          with_items:
            - "{{ ip_integers.stdout_lines }}"
          when: (item | int >= start_range_ip_int.stdout | int) and (item | int <= end_range_ip_int.stdout | int)

        - name: Get count of source IP file where all IPs are present
          shell: "cat {{ temp_mgmt_hosts_file_path }} | wc -l"
          register: source_wc

        - name: Print IP count in source file
          debug:
            var: source_wc.stdout

        - name: Get count of target IP file where only IPs within range are present
          shell: "cat {{ sample_target_file_path }} | wc -l"
          register: target_wc

        - name: Print IP count in target file
          debug:
            var: target_wc.stdout

        - name: Delete sample files created
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - "{{ temp_mgmt_hosts_file_path }}"
            - "{{ sample_ip_integer_file_path }}"
            - "{{ sample_target_file_path }}"

        - name: Validate IPs within given range
          assert:
            that:
              - "source_wc.stdout | int == target_wc.stdout | int"
            success_msg: "{{ validate_ip_success_msg }}"
            fail_msg: "{{ validate_ip_fail_msg }}"
      when: ( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )
      tags: TC_NTWK_006

# Testcase to validate presence of cobbler container
- name: OMNIA_1.2.1_NETWORK_TC_007
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate presence of cobbler container
      block:
        - name: Get all pods
          command: "kubectl get pods -A"
          register: all_pod_info

        - name: Validate presence of management network container
          assert:
            that:
              - "'cobbler' in all_pod_info.stdout"
            success_msg: "{{ cobbler_container_present_success_msg }}"
            fail_msg: "{{ cobbler_container_present_fail_msg }}"
      when: ( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )
      tags: TC_NTWK_007

# Testcase to validate whether cobbler dhcpd.leases is empty or not
- name: OMNIA_1.2.1_NETWORK_TC_008
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate cobbler dhcpd.leases is not empty
      block:
        - name: Get cobbler pod info
          command: kubectl get pods -n {{ cobbler_ns }}
          register: cobbler_pods

        - name: Get pods in management network container
          set_fact:
            cobbler_pod_info: "{{ item }}"
          with_items:
            - "{{ cobbler_pods.stdout_lines }}"
          when: item | regex_search(cobbler_keyword)

        - name: Get cobbler pod
          shell: echo {{ cobbler_pod_info }} | awk '{print $1}'
          register: cobbler_pod

        - name: Get dhcpd.leases file from cobbler container
          shell: 'kubectl exec -it {{ cobbler_pod.stdout }} -n {{ cobbler_ns }} -- cat {{ cobbler_dhcpd_container_file_path }} > {{ temp_dhcpd_path }}'
      
        - name: Validate dhcpd.leases file is empty or not
          shell: 'cat {{ temp_dhcpd_path }} | wc -l'
          register: cobbler_dhcpd_file_count    

        - name: Delete temp file created
          file:
            path: "{{ temp_dhcpd_path }}"
            state: absent

        - name: validate dhcpd.leases is not empty
          assert:
            that:
              - cobbler_dhcpd_file_count.stdout | int > 0
            success_msg: "{{ cobbler_dhcpd_not_empty_msg }}"
            fail_msg: "{{ cobbler_dhcpd_empty_msg }}"
      when: ( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )
      tags: TC_NTWK_008

# Testcase to validate provisioned_hosts.yml
- name: OMNIA_1.2.1_NETWORK_TC_009
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Validate provisioned_hosts.yml is not empty
      block:
        - name: Get provisioned_hosts.yml content
          shell: 'cat {{cobbler_hosts_file_path }} > {{ temp_cobbler_hosts_file_path }}'

        - name: Remove blank lines from the file
          lineinfile:
            path: "{{ temp_cobbler_hosts_file_path }}"
            regexp: '^\s*$'
            state: absent

        - name: Validate mgmt_provisioned_hosts.yml
          shell: 'cat {{ temp_cobbler_hosts_file_path }} | wc -l'
          register: cobbler_host_count

        - name: Delete temp file created
          file:
            path: "{{ temp_cobbler_hosts_file_path }}"
            state: absent

        - name: Assert whether mgmt_provisioned_hosts.yml is empty or not
          assert:
            that:
              - cobbler_host_count.stdout | int > 0
            success_msg: "{{ cobbler_hosts_not_empty_msg }}"
            fail_msg: "{{ cobbler_hosts_empty_msg }}"
      when: ( network_interface_type == "dedicated" ) and ( mgmt_network_nic != host_network_nic )
      tags: TC_NTWK_009


## TESTCASES FOR SHARED LOM MANAGEMENT NIC ##

# Testcase to validate absence of management network container
- name: OMNIA_1.2.1_NETWORK_TC_010
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
  tasks:
    - name: Validate dhcpd.leases is not empty
      block:
        - name: Get all pods
          command: "kubectl get pods -A"
          register: all_pod_info

        - name: Validate presence of management network container
          assert:
            that:
              - "'mgmt-network-container' not in all_pod_info.stdout"
            success_msg: "{{ mgmt_container_present_fail_msg }}"
            fail_msg: "{{ mgmt_container_present_success_msg }}"
      when: ( network_interface_type == "lom" ) and ( mgmt_network_nic == host_network_nic )
      tags: TC_NTWK_010


## TESTCASES FOR DEDICATED AND SHARED INTERNET ACCESS ##

# Testcase to validate resolv.conf in control plane when dedicated/shared internet access is enabled
- name: OMNIA_1.2.1_NETWORK_TC_001
  hosts: localhost
  vars_files:
    - test_vars/test_lom_vars.yml
    - /root/omnia/control_plane/input_params/base_vars.yml
  tasks:
    - name: Get resolv.conf
      shell: 'cat /etc/resolv.conf'
      register: resolv_op

    - name: Validate resolv.conf
      assert:
        that:
          - "'10.8.8.8' in resolv_op.stdout"
          - "'10.7.7.7' in resolv_op.stdout"
        success_msg: "Control plane has dedicated internet access"
        fail_msg: "Control plane has dedicated internet access"
      when: (primary_dns == "" and secondary_dns = "" or primary_dns != "" and secondary_dns != "")

# Testcase to validate resolv.conf in login_node, manager and nfs_node when dedicated internet is enabled
# This testcase needs to be executed with inventory file with below format
# [login_node]
# {{ login_node_ip }}
#
# [manager]
# {{ manager_node_ip }}
#
# [compute]
# {{ compute_node_ip }}
#
# [nfs_node]
# {{ nfs_node_ip }}
- name: OMNIA_1.2.1_NETWORK_TC_001
  hosts: login_node, manager, nfs_node
  vars_files:
    - test_vars/test_lom_vars.yml
  tasks:
    - name: Get resolv.conf
      shell: 'cat /etc/resolv.conf'
      register: resolv_op

    - name: Validate resolv.conf
      assert:
        that:
          - "'10.8.8.8' in resolv_op.stdout"
          - "'10.7.7.7' in resolv_op.stdout"
        success_msg: "Control plane has dedicated internet access"
        fail_msg: "Control plane has dedicated internet access"
      when: (primary_dns == "" and secondary_dns == "")

# Testcase to validate resolv.conf in login, manager and nfs node when shared internet is enabled
# This testcase needs to be executed with inventory file with below format
# [login_node]
# {{ login_node_ip }}
#
# [manager]
# {{ manager_node_ip }}
#
# [compute]
# {{ compute_node_ip }}
#
# [nfs_node]
# {{ nfs_node_ip }}
- name: OMNIA_1.2.1_NETWORK_TC_001
  hosts: login_node, manager, nfs_node
  vars_files:
    - test_vars/test_lom_vars.yml
  tasks:
    - name: Get resolv.conf
      shell: 'cat /etc/resolv.conf'
      register: resolv_op

    - name: Validate resolv.conf
      assert:
        that:
          - "' {{ cobbler_ip_range }}' in resolv_op.stdout"
        success_msg: "{{ compute_resolv_shared_inet_success_msg }}"
        fail_msg: "{{ compute_resolv_shared_inet_fail_msg }}"
      when: (primary_dns != "" and secondary_dns != "")

# Testcase to validate resolv.conf in compute node when dedicated internet is enabled
# This testcase needs to be executed with inventory file with below format
# [login_node]
# {{ login_node_ip }}
#
# [manager]
# {{ manager_node_ip }}
#
# [compute]
# {{ compute_node_ip }}
#
# [nfs_node]
# {{ nfs_node_ip }}
- name: OMNIA_1.2.1_NETWORK_TC_001
  hosts: compute
  vars_files:
    - test_vars/test_lom_vars.yml
  tasks:
    - name: Get resolv.conf
      shell: 'cat /etc/resolv.conf'
      register: resolv_op

    - name: Validate resolv.conf
      assert:
        that:
          - "' {{ public_ip_range }}' in resolv_op.stdout"
        success_msg: "{{ compute_resolv_shared_inet_success_msg }}"
        fail_msg: "{{ compute_resolv_shared_inet_fail_msg }}"
      when: (primary_dns == "" and secondary_dns == "")

# Testcase to validate resolv.conf in compute node when shared internet is enabled
# This testcase needs to be executed with inventory file with below format
# [login_node]
# {{ login_node_ip }}
#
# [manager]
# {{ manager_node_ip }}
#
# [compute]
# {{ compute_node_ip }}
#
# [nfs_node]
# {{ nfs_node_ip }}
- name: OMNIA_1.2.1_NETWORK_TC_001
  hosts: compute
  vars_files:
    - test_vars/test_lom_vars.yml
  tasks:
    - name: Get resolv.conf
      shell: 'cat /etc/resolv.conf'
      register: resolv_op

    - name: Validate resolv.conf
      assert:
        that:
          - "' {{ cobbler_ip_range }}' in resolv_op.stdout"
        success_msg: "{{ compute_resolv_shared_inet_success_msg }}"
        fail_msg: "{{ compute_resolv_shared_inet_fail_msg }}"
      when: (primary_dns != "" and secondary_dns != "")

# Testcase to validate dedicated internet access on compute nodes
- name: OMNIA_1.2.1_ShINET_TC_001
  hosts: compute
  vars_files:
    - test_vars/test_lom_vars.yml
  tasks:
    - name: Get NIC details
      command: ip a
      register: host_nic_info

    - name: Get host nic details
      set_fact:
        host_nic_data: "{{ item }}"
      with_items:
        - "{{ host_nic_info.stdout_lines }}"
      when: public_ip_range in "{{ item }}"
      run_once: true
      ignore_errors: true

    - name: Get the public nic from host nic details
      set_fact:
        nic_to_be_down: "{{ host_nic_data[-4:] }}"

    - name: Print nic to be brought down
      debug:
        var=nic_to_be_down

    - name: Bring down public nic
      command: ifdown {{ nic_to_be_down }}
      register: ifdown_op

    - name: Install traceroute using public IP
      command: dnf install traceroute -y
      register: traceroute_installation_op

    - name: Run traceroute command to find DHCP
      command: traceroute {{ nameserver_ip }}
      register: traceroute_op

    - name: Validate dedicated internet access with public IP
      assert:
        that:
          - "'{{ public_ip_range }}' in '{{ traceroute_op.stdout_lines[0] }}'"
        success_msg: "{{ dedicated_inet_success_msg }}"
        fail_msg: "{{ dedicated_inet_fail_msg }}"
    

# Testcase to validate shared internet access on compute nodes
- name: OMNIA_1.2.1_ShINET_TC_001
  hosts: compute
  vars_files:
    - test_vars/test_lom_vars.yml
  tasks:
    - name: Get NIC details
      command: ip a
      register: host_nic_info

    - name: Get host nic details
      set_fact:
        host_nic_data: "{{ item }}"
      with_items:
        - "{{ host_nic_info.stdout_lines }}"
      when: public_ip_range in "{{ item }}"
      run_once: true
      ignore_errors: true

    - name: Get the public nic from host nic details
      set_fact:
        nic_to_be_down: "{{ host_nic_data[-4:] }}"

    - name: Print nic to be brought down
      debug:
        var=nic_to_be_down

    - name: Bring down public nic
      command: ifdown {{ nic_to_be_down }}
      register: ifdown_op

    - name: Install traceroute using cobbler IP
      command: dnf install traceroute -y
      register: traceroute_installation_op

    - name: Run traceroute command to find DHCP
      command: traceroute {{ nameserver_ip }}
      register: traceroute_op

    - name: Validate shared internet access with cobbler IP
      assert:
        that:
          - "'{{ cobbler_ip_range }}' in '{{ traceroute_op.stdout_lines[0] }}'"
        success_msg: "{{ shared_inet_success_msg }}"
        fail_msg: "{{ shared_inet_fail_msg }}"