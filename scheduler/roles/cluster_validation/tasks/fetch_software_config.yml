#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Initialise variables
  ansible.builtin.set_fact:
    k8s_support: false
    slurm_support: false

- name: Load software_config.json
  ansible.builtin.include_vars:
    file: "{{ software_config_json_file }}"
    name: software_config

# Check if k8s is mentioned in software_config.json
- name: Check if k8s support is true
  ansible.builtin.set_fact:
    k8s_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'k8s') | list | length > 0 }}"

- name: Check if slurm support is true
  ansible.builtin.set_fact:
    slurm_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'slurm') | list | length > 0 }}"

- name: Set facts for cluster
  ansible.builtin.set_fact:
    cluster_os_type: "{{ software_config.cluster_os_type }}"

- name: Check if slurm support is required
  ansible.builtin.fail:
    msg: "{{ ubuntu_slurm_support_fail_msg }}"
  when:
    - slurm_support is true
    - cluster_os_type == compute_os_ubuntu

- name: Check if ucx is true
  ansible.builtin.set_fact:
    ucx_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'ucx') | list | length > 0 }}"

- name: Validate ucx version when ucx is required
  when: ucx_support is true
  block:
    - name: Get ucx version
      ansible.builtin.set_fact:
        ucx_version: "{{ item.version }}"
      loop: "{{ software_config.softwares | default([]) }}"
      when:
        - "'ucx' in item.name"
        - item.version is defined
      loop_control:
        loop_var: item

    - name: Assert ucx version
      ansible.builtin.assert:
        that:
          - ucx_version | default("", true) | length > 1
        success_msg: "{{ success_msg_ucx_version }}"
        fail_msg: "{{ fail_msg_ucx_version }}"

- name: Check if openmpi is true
  ansible.builtin.set_fact:
    openmpi_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'openmpi') | list | length > 0 }}"

- name: Validate openmpi version when openmpi is required
  when: openmpi_support is true
  block:
    - name: Get openmpi version
      ansible.builtin.set_fact:
        openmpi_version: "{{ item.version }}"
      loop: "{{ software_config.softwares | default([]) }}"
      when:
        - "'openmpi' in item.name"
        - item.version is defined
      loop_control:
        loop_var: item

    - name: Assert openmpi version
      ansible.builtin.assert:
        that:
          - openmpi_version | default("", true) | length > 1
        success_msg: "{{ success_msg_openmpi_version }}"
        fail_msg: "{{ fail_msg_openmpi_version }}"

- name: Prepare kubernetes installation variables
  when: k8s_support is true
  block:
    - name: Extract k8s version
      ansible.builtin.set_fact:
        k8s_version: "{{ software_config.softwares | selectattr('name', 'equalto', 'k8s') | map(attribute='version') | first }}"
      # noqa: var-naming[no-jinja]

    - name: Load k8s.json
      ansible.builtin.set_fact:
        k8s_packages_json: "{{ lookup('file', k8s_packages_file) | from_json }}"

- name: Local local_repo_access.yml file
  ansible.builtin.include_vars: "{{ local_repo_access_dest_path }}"

- name: Check if utils support is true
  ansible.builtin.set_fact:
    utils_support: "{{ software_config.softwares | selectattr('name', 'equalto', 'utils') | list | length > 0 }}"
