#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

# Rollout coredns pod
- name: Wait for CoreDNS to restart
  ansible.builtin.command: kubectl rollout restart deployment/coredns -n kube-system  --timeout=5m
  changed_when: false
  failed_when: false

# Get deployed pods list
- name: Get K8s pods
  ansible.builtin.command: kubectl get pods --all-namespaces
  changed_when: false
  register: k8s_pods
  tags: init

- name: Create directory for temp k8s files
  ansible.builtin.file:
    path: "{{ k8s_tmp_dir }}"
    state: directory
    recurse: true

# Deploy kubernetes dashboard admin user and load balancer
- name: Copy k8s_dashboard_admin.yml file
  ansible.builtin.copy:
    src: "{{ k8s_dashboard_admin_file_source }}"
    dest: "{{ k8s_dashboard_admin_file_dest }}"
    mode: "{{ file_mode }}"

- name: Create admin user for K8s dashboard
  ansible.builtin.command: "kubectl apply -f {{ k8s_dashboard_admin_file_dest }}"
  changed_when: true

- name: Copy k8s_dashboard_load_balancer.yml file
  ansible.builtin.copy:
    src: "{{ k8s_dashboard_loadbalancer_file_source }}"
    dest: "{{ k8s_dashboard_loadbalancer_file_dest }}"
    mode: "{{ file_mode }}"

- name: Add load balancer to kubernetes dashboard
  ansible.builtin.command: "kubectl apply -f {{ k8s_dashboard_loadbalancer_file_dest }}"
  changed_when: true

# NVIDIA PLUGIN
- name: Copy nvidia_runtime_class.yml file
  ansible.builtin.copy:
    src: "{{ nvidia_runtime_source }}"
    dest: "{{ nvidia_runtime_dest }}"
    mode: "{{ file_mode }}"

- name: Create RuntimeClass for nvidia-plugin
  ansible.builtin.command: "kubectl apply -f {{ nvidia_runtime_dest }}"
  changed_when: true

- name: Install nvidia-device-plugin
  ansible.builtin.command: >
    helm install --namespace nvidia-device-plugin --create-namespace
     --generate-name --set runtimeClassName=nvidia --set migStrategy='{{ mig_strategy }}' --set gfd.enabled='{{ gpu_discovery_feature }}'
     '{{ nvidia_device_plugin_repo }}'
  changed_when: true
  when:
    - "'nvidia-device-plugin' not in k8s_pods.stdout"

# ROCM PLUGIN
- name: Deploy ROCm Device plugin
  ansible.builtin.command: "kubectl create -f '{{ rocm_device_plugin_yaml_url }}'"
  changed_when: true
  when: "'amdgpu-device-plugin-daemonset' not in k8s_pods.stdout"

- name: Patch DaemonSet with updated imagePullPolicy
  ansible.builtin.command: >
    kubectl patch daemonset amdgpu-device-plugin-daemonset -n kube-system --type='json'
    -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/imagePullPolicy", "value":"IfNotPresent"}]'
  changed_when: true

# HABANA PLUGIN
- name: Deploy Habana Device plugin
  when:
    - "'habanalabs-device-plugin-daemonset' not in k8s_pods.stdout"
    - k8s_version >= minimal_gaudi_k8s_version
    - hostvars['localhost']['is_gaudi_cluster'] is defined
  block:
    - name: Label nodes with Gaudi
      ansible.builtin.command: "kubectl label nodes {{ item }} {{ node_label_for_habana_device_plugin }}=true --overwrite"
      when: "hostvars[item]['node_has_gaudi'] | default(false)"
      loop: "{{ groups['kube_node'] | default([]) }}"

    - name: Download habana-device-plugin yaml file
      ansible.builtin.uri:
        url: "{{ habana_device_plugin_yaml_url }}"
        return_content: true
      register: habana_device_plugin_yaml_content

    - name: Modify habana-device-plugin yaml file
      ansible.builtin.set_fact:
        with_node_selector: |
          {{ habana_device_plugin_yaml_content.content }}
                nodeSelector:
                  {{ node_label_for_habana_device_plugin }}: 'true'

    - name: Install habana-device-plugin
      ansible.builtin.shell: |
        set -o pipefail
        echo "{{ with_node_selector }}" | kubectl create -f - 
      changed_when: true
      args:
        executable: /bin/bash

# MPI OPERATOR
- name: Install MPI Operator
  ansible.builtin.command: "kubectl create -f '{{ mpi_operator_yaml_url }}'"
  changed_when: true
  when: "'mpi-operator' not in k8s_pods.stdout"

# XILINX DEVICE PLUGIN
- name: Deploy Xilinx Device plugin
  ansible.builtin.command: "kubectl create -f '{{ xilinx_device_plugin_yaml_url }}'"
  changed_when: true
  when: "'device-plugin-daemonset' not in k8s_pods.stdout"

# NFS CLIENT PROVISIONER
- name: Start NFS Client Provisioner using NFS on manager node
  ansible.builtin.command: >
    helm install nfs-omnia '{{ nfs_subdir_external_provisioner_repo }}'
     --set nfs.server='{{ hostvars['127.0.0.1']['k8s_nfs_server_ip'] }}'
     --set nfs.path="{{ hostvars['127.0.0.1']['k8s_server_share_path'] }}"
  changed_when: true
  when: "'nfs-subdir-external-provisioner' not in k8s_pods.stdout"

- name: Set NFS-Client Provisioner as DEFAULT StorageClass
  ansible.builtin.shell: >
    kubectl patch storageclasses.storage.k8s.io nfs-client \
    -p '{ "metadata": { "annotations":{ "storageclass.kubernetes.io/is-default-class":"true" }}}'
  changed_when: true

# - name: Install Spark Operator
#  ansible.builtin.shell: "export PATH=/usr/local/bin:$PATH && helm repo add spark-operator '{{ spark_operator_repo }}'"
#  changed_when: true
#  tags: init

# - name: Install Spark Operator
#  ansible.builtin.command: >
#    helm install spark-operator/spark-operator
#     --namespace spark-operator --create-namespace
#     '{{ spark_operator_repo }}'
#  changed_when: true
#  when: "'spark-operator' not in k8s_pods.stdout"
#  tags: init
