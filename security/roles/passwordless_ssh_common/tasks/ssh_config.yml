#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Initialize username
  ansible.builtin.set_fact:
    user: "{{ item }}"

- name: Change sshd config - {{ user }}
  ansible.builtin.blockinfile:
    path: "{{ sshd_config_file }}"
    block: "{{ lookup('template', 'ssh_config') }}"

- name: Check sssd config - {{ user }}
  ansible.builtin.lineinfile:
    path: "{{ sssd_config_file }}"
    state: absent
    regexp: '^(services(.*)ssh(.*))'
  check_mode: true
  register: sssd_line
  when: hostvars['127.0.0.1']['authentication_type'] == "freeipa"

- name: Change sssd config - {{ user }}
  ansible.builtin.lineinfile:
    path: "{{ sssd_config_file }}"
    state: present
    backrefs: true
    regexp: '^(services(.*)$)'
    line: '\1, ssh'
  when:
    - hostvars['127.0.0.1']['authentication_type'] == "freeipa"
    - not sssd_line.found

- name: Restart sssd - {{ user }}
  ansible.builtin.service:
    name: "{{ service }}"
    state: restarted
  loop:
    - sssd.service
  loop_control: 
    loop_var: service
  when: hostvars['127.0.0.1']['authentication_type'] == "freeipa"

- name: Restart sshd - {{ user }}
  ansible.builtin.service:
    name: "{{ service }}"
    state: restarted
  loop:
    - sshd.service
  loop_control: 
    loop_var: service

- name: Create SSH key pair if home directory exists
  run_once: true
  delegate_to: "{{ groups['auth_server'][0] }}"
  block:
    - name: Create ssh directory if it does not exist - {{ user }}
      ansible.builtin.file:
        path: "{{ ssh_directory }}"
        state: directory
        mode: "{{ ssh_directory_perm }}"
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Check is ssh key pair available - {{ user }}
      ansible.builtin.stat:
        path: "{{ public_key_file }}"
      register: ssh_key_file

    - name: Check and create ssh key pair if not exists
      when: not ssh_key_file.stat.exists
      block:
        - name: Create ssh key pair - {{ user }}
          ansible.builtin.command: ssh-keygen -C "{{ user }}" -q -N '' -f "{{ keygen_path }}"
          changed_when: false

        - name: Change SSH key pair ownership - {{ user }}
          ansible.builtin.file:
            path: "{{ ssh_directory }}"
            owner: "{{ user }}"
            group: "{{ user }}"
            recurse: true
