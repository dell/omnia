#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Extract the domain name required by LDAP
  ansible.builtin.set_fact:
    reqd_domain_name: "{{ (hostvars['127.0.0.1']['domain_name'].split('.') | map('regex_replace', '^', 'dc=') | list) | join(',') }}"

- name: Update sssd.conf file for TLS connection type
  block:
    - name: Create sssd.conf file
      ansible.builtin.copy:
        src: "{{ role_path }}/files/sssd_tls.conf"
        dest: "{{ sssd_conf_dest }}"
        remote_src: false
        mode: "{{ file_permission }}"
        owner: "root"

    - name: Update the ldap server IP
      ansible.builtin.replace:
        path: "{{ sssd_conf_dest }}"
        regexp: "ldap://server-ip"
        replace: "ldap://{{ hostvars['127.0.0.1']['ldap_server_ip'] }}"

    - name: Update the domain name
      ansible.builtin.replace:
        path: "{{ sssd_conf_dest }}"
        regexp: "ldap_search_base = dc=omnia,dc=test"
        replace: "ldap_search_base = {{ reqd_domain_name }}"

    - name: Update the user home directory
      ansible.builtin.replace:
        path: "{{ sssd_conf_dest }}"
        regexp: "homedir_substring = /home"
        replace: "homedir_substring = {{ hostvars['127.0.0.1']['user_home_dir'] }}"

    - name: Update the certificate path
      ansible.builtin.replace:
        path: "{{ sssd_conf_dest }}"
        regexp: "ldap_tls_cacert = /etc/openldap/certs/ldapserver.crt"
        replace: "ldap_tls_cacert = {{ hostvars['127.0.0.1']['ldap_ca_cert_path'] }}"

    - name: Update bind dn details if it is provided in input file
      block:
        - name: Update the certificate path
          ansible.builtin.replace:
            path: "{{ sssd_conf_dest }}"
            regexp: "#ldap_default_bind_dn = cn=admin,dc=omnia,dc=test"
            replace: "ldap_default_bind_dn = cn={{ hostvars['127.0.0.1']['ldap_bind_username'] }},{{ reqd_domain_name }}"

        - name: Update the authtok type
          ansible.builtin.replace:
            path: "{{ sssd_conf_dest }}"
            regexp: "#ldap_default_authtok_type = password"
            replace: "ldap_default_authtok_type = password"

        - name: Update the ldap bind password
          ansible.builtin.replace:
            path: "{{ sssd_conf_dest }}"
            regexp: "#ldap_default_authtok = blank"
            replace: "ldap_default_authtok = {{ hostvars['127.0.0.1']['ldap_bind_password'] }}"
      when:
        - hostvars['127.0.0.1']['ldap_bind_username'] | length > 1
        - hostvars['127.0.0.1']['ldap_bind_password'] | length > 1
  when:
    - hostvars['127.0.0.1']['ldap_connection_type'] == 'TLS' or
      hostvars['127.0.0.1']['ldap_connection_type'] == 'tls'

- name: Update sssd.conf file for SSL connection type
  block:
    - name: Create sssd.conf file
      ansible.builtin.copy:
        src: "{{ role_path }}/files/sssd_ssl.conf"
        dest: "{{ sssd_conf_dest }}"
        remote_src: false
        mode: "{{ file_permission }}"
        owner: "root"

    - name: Update the ldap server IP
      ansible.builtin.replace:
        path: "{{ sssd_conf_dest }}"
        regexp: "ldap_uri = ldaps://server-ip:636"
        replace: "ldap_uri = ldaps://{{ hostvars['127.0.0.1']['ldap_server_ip'] }}:636"

    - name: Update the ldap server IP
      ansible.builtin.replace:
        path: "{{ sssd_conf_dest }}"
        regexp: "ldap_chpass_uri = ldaps://server-ip:636"
        replace: "ldap_chpass_uri = ldaps://{{ hostvars['127.0.0.1']['ldap_server_ip'] }}:636"
  when:
    - hostvars['127.0.0.1']['ldap_connection_type'] == 'SSL' or
      hostvars['127.0.0.1']['ldap_connection_type'] == 'ssl'
