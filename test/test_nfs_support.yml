#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

# Validate NFS share with all combinations of server_1, server_1_mount and client_mount
# Testcase to validate nfs client installation      
- name: OMNIA_1.3_NFS_TC_001
  hosts: login_node, manager, compute
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate nfs share between server and client
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"

    - block:
        - name: Get nfs client stat
          command: "nfsstat â€“c"
          register: nfs_client_stat

        - name: Validate status of nfs client
          assert:
            that:
              - "'Client nfs' in nfs_client_stat.stdout"
            success_msg: "{{ nfs_client_status_success_msg }}"
            fail_msg: "{{ nfs_client_status_fail_msg }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and ( client_mount != "" ) or (client_mount == "")
      tags: TC_NFS_001, TC_NFS_002, TC_NFS_006, TC_NFS_009

# Testcase to validate presence of nfs server mount location
- name: OMNIA_1.3_NFS_TC_002
  hosts: nfs_node
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate nfs share between server and client
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"

    - block:
        - name: Identify presence of server mount
          stat:
            path: "{{ server_mount }}"
          register: is_server_mount

        - name: Validate presence of server mount
          assert:
            that:
              - "is_server_mount.stat.exists == true"
            success_msg: "{{ nfs_server_mount_present_sucess_msg }}"
            fail_msg: "{{ nfs_server_mount_present_fail_msg }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and (client_mount != "") or (client_mount == "")
      tags: TC_NFS_001, TC_NFS_002, TC_NFS_007, TC_NFS_009

# Testcase to validate presence of nfs client mount location
- name: OMNIA_1.3_NFS_TC_003
  hosts: login_node, manager, compute
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate presence of nfs client mount location
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"

    - block:
        - name: Identify presence of nfs client mount
          stat:
            path: "{{ client_mount }}"
          register: is_client_mount

        - name: Validate presence of server mount
          assert:
            that:
              - "is_client_mount.stat.exists == true"
            success_msg: "{{ nfs_client_mount_present_success_msg }}"
            fail_msg: "{{ nfs_client_mount_present_fail_msg }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and ( client_mount != "" )
      tags: TC_NFS_001, TC_NFS_006, TC_NFS_009

# Testcase to validate NFS share on server and client
- name: OMNIA_1.3_NFS_TC_004
  hosts: all
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate nfs share between server and client
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"
    
    - block:  
        - name: Create a file in nfs server mount location
          shell:
            cmd: "touch {{ nfs_server_file }}"
            chdir: "{{ server_mount }}"
          with_items:
            - "{{ groups['nfs_node'] }}"
          when: "'nfs_node' in group_names"

        - name: Validate the server file in client - login node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ client_mount }}"
          register: nfs_client_login_list_files
          with_items:
            - "{{ groups['login_node'] }}"
          when: "'login_node' in group_names"

        - name: Validate nfs share between server and client in login node
          assert:
            that:
              - "'{{ nfs_server_file }}' in item.stdout"
            success_msg: "{{ nfs_share_login_success_msg }}"
            fail_msg: "{{ nfs_share_login_fail_msg }}"
          loop: "{{ nfs_client_login_list_files.results }}"

        - name: Validate the server file in client - manager node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ client_mount }}"
          register: nfs_client_manager_list_files
          with_items:
            - "{{ groups['manager'] }}"
          when: "'manager' in group_names"

        - name: Validate nfs share between server and client in manager node
          assert:
            that:
              - "'{{ nfs_server_file }}' in item.stdout"
            success_msg: "{{ nfs_share_manager_success_msg }}"
            fail_msg: "{{ nfs_share_manager_fail_msg }}"
          loop: "{{ nfs_client_manager_list_files.results }}"

        - name: Validate the server file in client - compute node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ client_mount }}"
          register: nfs_client_compute_list_files
          with_items:
            - "{{ groups['compute'] }}"
          when: "'compute' in group_names"

        - name: Validate nfs share between server and client in compute node
          assert:
            that:
              - "'{{ nfs_server_file }}' in item.stdout"
            success_msg: "{{ nfs_share_compute_success_msg }}"
            fail_msg: "{{ nfs_share_compute_fail_msg }}"
          loop: "{{ nfs_client_compute_list_files.results }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and ( client_mount != "")
      tags: TC_NFS_001

# Validate NFS share when server_1 and server_mount has acceptable values with client_mount being empty
# Testcase to validate presence of nfs client mount location
- name: OMNIA_1.3_NFS_TC_006
  hosts: login_node, manager, compute
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate presence of nfs client mount location
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"

    - block:
        - name: Identify presence of nfs client mount
          stat:
            path: "{{ server_mount }}"
          register: is_client_mount

        - name: Validate presence of client mount
          assert:
            that:
              - "is_client_mount.stat.exists == true"
            success_msg: "{{ nfs_client_mount_present_success_msg }}"
            fail_msg: "{{ nfs_client_mount_present_fail_msg }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and ( client_mount == "" )
      tags: TC_NFS_002

# Testcase to validate NFS share on server and client
- name: OMNIA_1.3_NFS_TC_007
  hosts: all
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate nfs share between server and client
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"
    
    - block:  
        - name: Create a file in nfs server mount location
          shell:
            cmd: "touch {{ nfs_server_file }}"
            chdir: "{{ server_mount }}"
          with_items:
            - "{{ groups['nfs_node'] }}"
          when: "'nfs_node' in group_names"

        - name: Validate the server file in client - login node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ server_mount }}"
          register: nfs_client_login_list_files
          with_items:
            - "{{ groups['login_node'] }}"
          when: "'login_node' in group_names"

        - name: Validate nfs share between server and client in login node
          assert:
            that:
              - "'{{ nfs_server_file }}' in item.stdout"
            success_msg: "{{ nfs_share_login_success_msg }}"
            fail_msg: "{{ nfs_share_login_fail_msg }}"
          loop: "{{ nfs_client_login_list_files.results }}"

        - name: Validate the server file in client - manager node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ server_mount }}"
          register: nfs_client_manager_list_files
          with_items:
            - "{{ groups['manager'] }}"
          when: "'manager' in group_names"

        - name: Validate nfs share between server and client in manager node
          assert:
            that:
              - "'{{ nfs_server_file }}' in item.stdout"
            success_msg: "{{ nfs_share_manager_success_msg }}"
            fail_msg: "{{ nfs_share_manager_fail_msg }}"
          loop: "{{ nfs_client_manager_list_files.results }}"

        - name: Validate the server file in client - compute node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ server_mount }}"
          register: nfs_client_compute_list_files
          with_items:
            - "{{ groups['compute'] }}"
          when: "'compute' in group_names"

        - name: Validate nfs share between server and client in compute node
          assert:
            that:
              - "'{{ nfs_server_file }}' in item.stdout"
            success_msg: "{{ nfs_share_compute_success_msg }}"
            fail_msg: "{{ nfs_share_compute_fail_msg }}"
          loop: "{{ nfs_client_compute_list_files.results }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and ( client_mount == "")
      tags: TC_NFS_002

# Validate NFS share when server_ip and client_shared_path has acceptable values with server_shared_path being empty
- name: OMNIA_1.3_NFS_TC_008
  hosts: all
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate nfs share between server and client
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"
    
    - block:  
        - name: Launch device inventory job template
          awx.awx.tower_job_launch:
            job_template: "{{ deploy_omnia_template }}"
            tower_config_file: "{{ tower_config_file }}"
            wait: yes
            timeout: "{{ awx_max_wait_time }}"
          register: deploy_omnia_job_status

        - name: Validate status of deploy_omnia job template
          assert:
            that:
              - "'failed' in deploy_omnia_job_status.status"
            success_msg: "{{ deploy_omnia_fail_msg }}"
            fail_msg: "{{ deploy_omnia_success_msg }}"
      when: (( server_ip != "" ) and ( server_mount == "" ) and ( client_mount != "")) or (( server_ip == "" ) and ( client_mount == "" )) or (( server_mount == "" )) or (( server_ip == "" ) and ( server_shared_path == "" )) or (( server_ip == "" ) and ( client_mount == "" ))
      tags: TC_NFS_003, TC_NFS_004, TC_NFS_005, TC_NFS_006

# Validate NFS share when NFS is not running
# Testcase to stop nfs process on nfs node
- name: OMNIA_1.3_NFS_TC_008
  hosts: nfs_node
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate nfs share between server and client
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"

    - block:
        - name: Stop nfs server process
          command: "systemctl stop nfs-server.service"

        - name: Get the status of nfs server process
          command: "systemctl status nfs-server.service"
          register: nfs_server_status

        - name: Validate status of nfs server process
          assert:
            that:
              - "'inactive' in nfs_server_status.stdout"
            success_msg: "{{ nfs_server_stopped_success_msg }}"
            fail_msg: "{{ nfs_server_stopped_fail_msg }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and ( client_mount != "" ) or (client_mount == "")
      tags: TC_NFS_009

# Testcase to validate NFS share on server and client
- name: OMNIA_1.3_NFS_TC_009
  hosts: all
  vars_files:
    - test_vars/test_nfs_vars.yml
    - /root/omnia/omnia_config.yml
  tasks:
    - name: Validate nfs share between server and client
      set_fact:
        server_ip: "{{ item.server_ip }}"
        server_mount: "{{ item.server_shared_path }}"
        client_mount: "{{ item.client_shared_path }}"
      with_items:
        - "{{ nfs_bolt_on }}"
    
    - block:  
        - name: Create a file in nfs server mount location
          shell:
            cmd: "touch {{ nfs_server_file }}"
            chdir: "{{ server_mount }}"
          with_items:
            - "{{ groups['nfs_node'] }}"
          when: "'nfs_node' in group_names"

        - name: Validate the server file in client - login node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ client_mount }}"
          register: nfs_client_login_list_files
          with_items:
            - "{{ groups['login_node'] }}"
          when: "'login_node' in group_names"

        - name: Validate nfs share between server and client in login node
          assert:
            that:
              - "'{{ nfs_server_file }}' not in item.stdout"
            success_msg: "{{ no_nfs_share_login_success_msg }}"
            fail_msg: "{{ no_nfs_share_login_fail_msg }}"
          loop: "{{ nfs_client_login_list_files.results }}"

        - name: Validate the server file in client - manager node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ client_mount }}"
          register: nfs_client_manager_list_files
          with_items:
            - "{{ groups['manager'] }}"
          when: "'manager' in group_names"

        - name: Validate nfs share between server and client in manager node
          assert:
            that:
              - "'{{ nfs_server_file }}' not in item.stdout"
            success_msg: "{{ no_nfs_share_manager_success_msg }}"
            fail_msg: "{{ no_nfs_share_manager_fail_msg }}"
          loop: "{{ nfs_client_manager_list_files.results }}"

        - name: Validate the server file in client - compute node
          shell:
            cmd: "ls -ltr"
            chdir: "{{ client_mount }}"
          register: nfs_client_compute_list_files
          with_items:
            - "{{ groups['compute'] }}"
          when: "'compute' in group_names"

        - name: Validate nfs share between server and client in compute node
          assert:
            that:
              - "'{{ nfs_server_file }}' not in item.stdout"
            success_msg: "{{ no_nfs_share_compute_success_msg }}"
            fail_msg: "{{ no_nfs_share_compute_fail_msg }}"
          loop: "{{ nfs_client_compute_list_files.results }}"
      when: ( server_ip != "" ) and ( server_mount != "" ) and ( client_mount != "")
      tags: TC_NFS_009

