#  Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Permanently Disable swap
  ansible.builtin.mount:
    name: "swap"
    fstype: swap
    state: absent

- name: Copy k8s.conf file
  ansible.builtin.copy:
    src: k8s.conf
    dest: "{{ k8s_conf_dest }}"
    owner: root
    group: root
    mode: "{{ conf_file_mode }}"

- name: Copy crio.conf file
  ansible.builtin.copy:
    src: crio.conf
    dest: "{{ crio_conf_dest }}"
    owner: root
    group: root
    mode: "{{ conf_file_mode }}"

- name: Enable the kernel modules overlay and br_netfilter
  ansible.builtin.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - overlay
    - br_netfilter

- name: Update sysctl to handle incorrectly routed traffic when iptables is bypassed
  ansible.builtin.copy:
    src: k8s-crio.conf
    dest: "{{ k8s_crio_conf_dest }}"
    owner: root
    group: root
    mode: "{{ conf_file_mode }}"

- name: Update sysctl
  ansible.builtin.command: /sbin/sysctl --system
  changed_when: true

- name: Add CRI-O repo (1/2)
  ansible.builtin.get_url:
    url: "{{ crio_repo1_url }}"
    dest: "{{ crio_repo1_dest }}"
    mode: "{{ file_mode }}"
  register: crio_repo1_result
  until: crio_repo1_result is not failed
  retries: 20

- name: Add CRI-O repo (2/2)
  ansible.builtin.yum_repository:
    name: devel:kubic:libcontainers:stable:cri-o:1.21
    description: crio2
    baseurl: "{{ crio_repo2_url }}"
    enabled: true
    gpgcheck: true
    gpgkey:
      - "{{ crio_repo2_gpg }}"
  register: crio_repo2_result
  until: crio_repo2_result is not failed
  retries: 20

- name: Add kubernetes repo
  ansible.builtin.yum_repository:
    name: kubernetes
    description: kubernetes
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    enabled: true
    gpgcheck: false
    repo_gpgcheck: true
    gpgkey:
      - https://packages.cloud.google.com/yum/doc/yum-key.gpg
      - https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: Install common packages for rocky
  ansible.builtin.package:
    name: "{{ k8s_common_packages_rocky }}"
    state: present
  when: os_supported_rocky in mgmt_os

- name: Install and configure crio for RHEL
  block:
    - name: Fetch redhat subscription status
      ansible.builtin.command: subscription-manager list
      changed_when: false
      register: rhsm_status

    - name: Install packages for RHEL
      ansible.builtin.package:
        name: "{{ k8s_common_packages_rhel }}"
        state: present

    - name: Install cri-o for RHEL with repos
      ansible.builtin.yum:
        name: cri-o
        enablerepo: "{{ crio_repo }}"
        disablerepo: "*"
        state: present
      when: "'Subscribed' in rhsm_status.stdout"

    - name: Install cri-o for RHEL
      ansible.builtin.yum:
        name: cri-o
        state: present
      when: "'Subscribed' not in rhsm_status.stdout"

    - name: Add versionlock cri-o
      ansible.builtin.command: yum versionlock cri-o
      args:
        warn: false
      changed_when: true
  when: os_supported_rhel in mgmt_os

- name: Install k8s packages
  ansible.builtin.package:
    name: "{{ k8s_packages }}"
    state: present

- name: Versionlock kubernetes
  ansible.builtin.command: "yum versionlock '{{ item }}'"
  args:
    warn: false
  with_items:
    - "{{ k8s_packages }}"
  changed_when: true

- name: Add docker community edition repository for docker-ce-cli
  ansible.builtin.get_url:
    url: "{{ docker_repo_url }}"
    dest: "{{ docker_repo_dest }}"
    mode: "{{ file_mode }}"
  register: docker_repo
  until: docker_repo is not failed
  retries: "{{ max_retries }}"
  delay: "{{ min_delay }}"

- name: Install docker-ce-cli
  ansible.builtin.package:
    name: docker-ce-cli
    state: present

- name: Start and enable crio
  ansible.builtin.service:
    name: crio
    state: restarted
    daemon_reload: true
    enabled: true

- name: Start and enable kubernetes - kubelet
  ansible.builtin.service:
    name: kubelet
    state: restarted
    enabled: true

- name: Wait for 30sec for kubelet to get things ready
  ansible.builtin.pause:
    seconds: "{{ wait_time }}"
