# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Initialize split_ready_status to false
  ansible.builtin.set_fact:
    split_ready_status: false

- name: Fetch ports needs to be splitted
  block:
     # This task is used when user do not specify ports as a range
    - name: Initialize range_ports variable with user provided ports
      ansible.builtin.set_fact:
        range_ports: "{{ ib_split_ports }}"

    - name: Collect ports which are specified in range format
      ansible.builtin.set_fact:
        range_ports: "{{ lookup('vars', 'item').split('-') | map('trim') | unique | select | join('-1' + '/') }}"
      when: '"-" in item'
      with_items: "{{ ib_split_ports }}"

    - name: Create a list of formatted ports
      ansible.builtin.set_fact:
        ib_ports_list: "{{ lookup('vars', 'item').split(',') | map('trim') | unique | select | list }}"
      with_items: "{{ range_ports }}"
  when: ib_split_ports | default("", true) | length > 1

- name: Validate ib_default_password declaration
  ansible.builtin.fail:
    msg: "{{ ib_default_passwd_dec_fail_msg }}"
  when: ib_default_password is not defined

- name: Validate ib_admin_password declaration
  ansible.builtin.fail:
    msg: "{{ ib_admin_passwd_dec_fail_msg }}"
  when: ib_admin_password is not defined

- name: Validate ib_monitor_password declaration
  ansible.builtin.fail:
    msg: "{{ ib_monitor_passwd_dec_fail_msg }}"
  when: ib_monitor_password is not defined

- name: Validate admin password is not username
  ansible.builtin.fail:
    msg: "{{ ib_usr_admin_passwd_fail_msg }}"
  when: ib_admin_password == ib_username

- name: Validate monitor password is not username
  ansible.builtin.fail:
    msg: "{{ ib_usr_monitor_passwd_fail_msg }}"
  when: ib_monitor_password == ib_username

- name: Validate default password of IB switch
  block:
    - name: Assert ib_default_password
      ansible.builtin.assert:
        that:
          - ib_default_password | length > 0
          - '"-" not in ib_default_password '
          - '"\\" not in ib_default_password '
          - '"\"" not in ib_default_password '
          - " \"'\" not in ib_default_password "
      no_log: true
  rescue:
    - name: Validate ib_default_password
      ansible.builtin.fail:
        msg: "{{ ib_default_password_fail_msg }}"

- name: Validate admin password of IB switch
  block:
    - name: Asset ib_admin_password
      ansible.builtin.assert:
        that:
          - ib_admin_password | regex_search('^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z]).{8,}$')
          - ib_admin_password | length < 65
          - '"-" not in ib_admin_password '
          - '"\\" not in ib_admin_password '
          - '"\"" not in ib_admin_password '
          - " \"'\" not in ib_admin_password "
      no_log: true
  rescue:
    - name: Validate ib_admin_password
      ansible.builtin.fail:
        msg: "{{ ib_admin_password_fail_msg }}"

- name: Validate monitor password of IB switch
  block:
    - name: Validate ib_monitor_password
      ansible.builtin.assert:
        that:
          - ib_monitor_password | regex_search('^(?=.*[A-Z])(?=.*[0-9])(?=.*[a-z]).{8,}$')
          - ib_monitor_password | length < 65
          - '"-" not in ib_monitor_password '
          - '"\\" not in ib_monitor_password '
          - '"\"" not in ib_monitor_password '
          - " \"'\" not in ib_monitor_password "
      no_log: true
  rescue:
    - name: Validate ib_monitor_password
      ansible.builtin.fail:
        msg: "{{ ib_monitor_password_fail_msg }}"