# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Check psql version
  ansible.builtin.shell: >
    set -o pipefail && \
    psql --version | awk '{print $3}'
  changed_when: false
  register: check_psql_version

- name: Set psql_version
  ansible.builtin.set_fact:
    psql_version: "{{ check_psql_version.stdout.split('.')[0] }}"

- name: Update postgres version pgsqlsetup script in ubuntu
  ansible.builtin.replace:
    path: "{{ pgsqlsetup_path }}"
    regexp: "9.1"
    replace: "{{ psql_version }}"

- name: Setup postgres database (This task may take 10 mins)
  ansible.builtin.command: "{{ pgsqlsetup_path }} -i -V"
  changed_when: true
  no_log: true
  environment:
    XCATPGPW: "{{ postgresdb_password }}"

- name: Start and enable xcat services in ubuntu
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items: "{{ xcat_services_ubuntu }}"

- name: Create conf directory for postgresql in ubuntu
  ansible.builtin.file:
    path: "{{ postgresql_conf_dir_ubuntu }}"
    state: directory
    mode: "{{ file_permission }}"

- name: Copy postgresql.conf in ubuntu
  ansible.builtin.copy:
    src: "{{ postgresql_conf_src }}"
    dest: "{{ postgresql_conf_dest_ubuntu }}"
    mode: preserve

- name: Reload systemd
  ansible.builtin.systemd:
    daemon-reload: true

- name: Remove .postgres directory
  ansible.builtin.file:
    path: "{{ postgres_file_path }}"
    state: absent
  failed_when: false

- name: Create .postgres directory
  ansible.builtin.file:
    path: "{{ postgres_file_path }}"
    state: directory
    mode: "{{ directory_permissions }}"

- name: Get encrypted_file status
  ansible.builtin.stat:
    path: "{{ encrypted_file_path }}"
  register: key_status

- name: Invoke python utility to generate key if not exists
  ansible.builtin.command: |
    {{ python_version }} {{ utility_path }} {{ postgresdb_password }}
  changed_when: false
  when: not key_status.stat.exists
  no_log: true

- name: Set default pg_hba_conf_update
  ansible.builtin.set_fact:
    pg_hba_conf_update: false

- name: Read pg_hba_conf file
  ansible.builtin.slurp:
    path: "{{ pg_hba_conf_path }}"
  register: pg_hba_conf_content

- name: Set pg_hba_conf_update status
  ansible.builtin.set_fact:
    pg_hba_conf_update: "{{ pg_hba_conf_content.content | b64decode | regex_search('^local\\s+all\\s+postgres\\s+md5', multiline=True) is not none }}"

- name: Check pg_hba_conf_update status
  when: pg_hba_conf_update == false
  block:
    - name: Set PostgreSQL password for postgres user
      become: true
      become_user: postgres
      ansible.builtin.shell: "echo \"ALTER USER postgres WITH PASSWORD '{{ postgresdb_password }}';\" | psql"
      no_log: true

    - name: Replace peer to md5 in pg_hba.conf
      ansible.builtin.replace:
        path: "{{ pg_hba_conf_path }}"
        regexp: "^local(.*)all(.*)postgres(.*)"
        replace: "local    all            postgres                                md5"
      register: pg_hba_conf_update

- name: Restart postgresql service
  ansible.builtin.systemd:
    name: "postgresql@{{ psql_version }}-main.service"
    state: restarted
  when: pg_hba_conf_update.changed # noqa: no-handler
