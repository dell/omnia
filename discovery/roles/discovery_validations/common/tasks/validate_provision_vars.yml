# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Initialize supported_os_version_status
  ansible.builtin.set_fact:
    supported_os_version_status: false

- name: Set provision_os in lowercase
  ansible.builtin.set_fact:
    provision_os: "{{ provision_os | lower }}"

- name: Validate input parameters of provision vars are not empty
  ansible.builtin.fail:
    msg: "{{ input_provision_fail_msg }}"
  when:
    - timezone | default("", true) | length < 1 or
      language | default("", true) | length < 1 or
      iso_file_path | default("", true) | length < 1 or
      default_lease_time | default("", true) | string | length < 1 or
      provision_os | default("", true) | length < 1 or
      provision_os_version | default("", true) | string | length < 1

- name: Assert nodename
  ansible.builtin.assert:
    that:
      - node_name | length > 1
      - '"_" not in node_name'
      - '"." not in node_name'
      - '" " not in node_name'
      - '"node-" not in node_name'
    quiet: true
    fail_msg: "{{ nodename_chars_fail_msg }}"
  when:
    - discovery_mech_bmc or discovery_mech_switch_based

- name: Validate default lease time
  ansible.builtin.assert:
    that:
      - default_lease_time|int
      - default_lease_time|int <= 31536000
      - default_lease_time|int >= 21600
    success_msg: "{{ default_lease_time_success_msg }}"
    fail_msg: "{{ default_lease_time_fail_msg }}"

- name: Convert timezone.txt to linux format
  ansible.builtin.command: dos2unix {{ role_path }}/files/timezone.txt
  failed_when: false
  changed_when: false

- name: Searching for timezone
  ansible.builtin.lineinfile:
    path: "{{ role_path }}/files/timezone.txt"
    line: "{{ timezone }}"
    state: present
  check_mode: true
  register: timezone_search

- name: Assert timezone
  ansible.builtin.assert:
    that: timezone_search is not changed
    success_msg: "{{ timezone_success_msg }}"
    fail_msg: "{{ timezone_fail_msg }}"
  register: timezone_check

- name: Assert language for provisioning nodes
  ansible.builtin.fail:
    msg: "{{ language_fail_msg }}"
  when: '"en-US" not in language'

- name: Assert provision_os for RHEL control plane
  ansible.builtin.assert:
    that:
      - provision_os | lower == os_supported_rhel
    success_msg: "{{ provision_os_success_msg }}"
    fail_msg: "{{ provision_os_fail_msg }}"
  when:
    - control_plane_os in control_plane_os_redhat

- name: Assert provision_os for Rocky control plane
  ansible.builtin.assert:
    that:
      - provision_os | lower == os_supported_rocky
    success_msg: "{{ provision_os_success_msg }}"
    fail_msg: "{{ provision_os_fail_msg }}"
  when:
    - control_plane_os in control_plane_os_rocky

- name: Assert provision_os for Ubuntu control plane
  ansible.builtin.assert:
    that:
      - provision_os | lower == os_supported_ubuntu
    success_msg: "{{ provision_os_success_msg }}"
    fail_msg: "{{ provision_os_fail_msg }}"
  when:
    - control_plane_os in control_plane_os_ubuntu

- name: Set supported_os_version_status to true - rhel/rocky
  ansible.builtin.set_fact:
    supported_os_version_status: true
  with_items: "{{ supported_rhel_os_version }}"
  when:
    - provision_os_version | string  == item | string
    - provision_os | lower == os_supported_rhel or
      provision_os | lower == os_supported_rocky

- name: Set supported_os_version_status to true - ubuntu
  ansible.builtin.set_fact:
    supported_os_version_status: true
  with_items: "{{ supported_ubuntu_os_version }}"
  when:
    - provision_os_version | string == item | string
    - provision_os | lower == os_supported_ubuntu

- name: Validate provision_os_version is supported
  ansible.builtin.fail:
    msg: "{{ provision_os_version_fail_msg }}"
  when: not supported_os_version_status

- name: Verify the iso_file_path
  ansible.builtin.stat:
    path: "{{ iso_file_path }}"
  register: result_path_iso_file

- name: Assert iso_file_path location
  ansible.builtin.fail:
    msg: "{{ iso_file_path_missing_msg }}"
  when: not result_path_iso_file.stat.exists

- name: Validate iso_file_path name
  ansible.builtin.assert:
    that:
      - result_path_iso_file.stat.exists
      - '".iso" in iso_file_path'
      - provision_os in iso_file_path | lower
      - provision_os_version | string in iso_file_path
    success_msg: "{{ iso_file_path_success_msg }}"
    fail_msg: "{{ iso_file_path_fail_msg }}"

- name: Validate ubuntu_kernel_flavor
  ansible.builtin.assert:
    that:
      - ubuntu_kernel_flavor == "hwe" or ubuntu_kernel_flavor == "generic"
    fail_msg: "{{ ubuntu_kernel_fail_msg }}"
  when:
    - provision_os | lower == os_supported_ubuntu
    - provision_os_version | string == ubuntu22_version
    - ubuntu_kernel_flavor is defined
