# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Validate admin_nic details
  ansible.builtin.assert:
    that:
      - network_data.admin_network.nic_name | default("", true) | length > 0
      - network_data.admin_network.netmask_bits | default("", true) | length > 0
      - network_data.admin_network.static_range | default("", true) | length > 0
      - network_data.admin_network.dynamic_range | default("", true) | length > 0
    success_msg: "{{ success_msg_admin_nic_details }}"
    fail_msg: "{{ fail_msg_admin_nic_details }}"

- name: Validate admin network netmask bits
  ansible.builtin.assert:
    that:
      - network_data.admin_network.netmask_bits | int >= 1
      - network_data.admin_network.netmask_bits | int <= 32
    fail_msg: "{{ fail_msg_admin_netmask_bits }}"

- name: Set pxe nic static start and end ranges
  ansible.builtin.set_fact:
    pxe_nic_start_range: "{{ network_data.admin_network.static_range | split('-') | first }}"
    pxe_nic_end_range: "{{ network_data.admin_network.static_range | split('-') | last }}"

- name: Set pxe nic dynamic start and end ranges
  ansible.builtin.set_fact:
    pxe_nic_dynamic_start_range: "{{ network_data.admin_network.dynamic_range | split('-') | first }}"
    pxe_nic_dynamic_end_range: "{{ network_data.admin_network.dynamic_range | split('-') | last }}"

- name: Validate if admin static ranges are valid
  ansible.builtin.assert:
    that:
      - pxe_nic_start_range.split('.') | map('int') | list | length == 4
      - pxe_nic_end_range.split('.') | map('int') | list | length == 4
      - pxe_nic_start_range | default("", true) | ansible.utils.ipaddr
      - pxe_nic_end_range | default("", true) | ansible.utils.ipaddr
    success_msg: "{{ admin_params_success_msg }}"
    fail_msg: "{{ admin_params_failure_msg }}"

- name: Validate if admin dynamic ranges are valid
  ansible.builtin.assert:
    that:
      - pxe_nic_dynamic_start_range | default("", true) | length > 1
      - pxe_nic_dynamic_end_range | default("", true) | length > 1
      - pxe_nic_dynamic_start_range.split('.') | map('int') | list | length == 4
      - pxe_nic_dynamic_end_range.split('.') | map('int') | list | length == 4
      - pxe_nic_dynamic_start_range | default("", true) | ansible.utils.ipaddr
      - pxe_nic_dynamic_end_range | default("", true) | ansible.utils.ipaddr
    success_msg: "{{ admin_params_success_msg }}"
    fail_msg: "{{ admin_params_failure_msg }}"

- name: Check Admin network static/dynamic range ip format
  ansible.builtin.assert:
    that:
      - (pxe_nic_start_range | ansible.utils.ipaddr('address')).split('.')[-1] | int != 0
      - (pxe_nic_dynamic_start_range | ansible.utils.ipaddr('address')).split('.')[-1] | int != 0
      - (pxe_nic_end_range | ansible.utils.ipaddr('address')).split('.')[-1] | int != 255
      - (pxe_nic_dynamic_end_range | ansible.utils.ipaddr('address')).split('.')[-1] | int != 255
    fail_msg: "{{ admin_range_ip_check_fail_msg }}"

- name: Check if admin ip ranges overlap
  block:
    - name: Validate input ranges for all ranges
      ansible.builtin.command:
        argv:
          - "{{ python_version }}"
          - "{{ validation_range_file }}"
          - "{{ pxe_nic_start_range }}"
          - "{{ pxe_nic_end_range }}"
          - "{{ pxe_nic_dynamic_start_range }}"
          - "{{ pxe_nic_dynamic_end_range }}"
      register: range_validation_status
      failed_when: range_validation_status.stdout == "True" or range_validation_status.rc != 0
      changed_when: true
  rescue:
    - name: Rescue block
      ansible.builtin.fail:
        msg: "{{ fail_admin_ip_range }}"

- name: Check admin network details are valid
  block:
    - name: Execute Python script to validate network address
      ansible.builtin.command: "{{ python_version }} {{ network_address_script }} admin_network"
      register: script_output
      changed_when: false
      environment:
        net_data: "{{ network_data | to_json }}"
  rescue:
    - name: Failed, Invalid admin network details
      ansible.builtin.fail:
        msg: "{{ fail_msg_admin_nic_details }} {{ fail_msg_admin_nic_ip_details }}"

- name: Validate admin nic ip status
  ansible.builtin.assert:
    that:
      - script_output.stdout | length > 0
      - script_output.rc == 0
    fail_msg: "{{ fail_msg_admin_nic_details }} {{ fail_msg_admin_nic_ip_details }}"

- name: Set pxe_nic_ip
  ansible.builtin.set_fact:
    admin_nic_ip: "{{ script_output.stdout }}"
    admin_nic: "{{ network_data.admin_network.nic_name }}"

- name: Assert admin nic value
  ansible.builtin.assert:
    that:
      - admin_nic in nic_addr_up.stdout
    success_msg: " Admin {{ success_msg_nic }}"
    fail_msg: "{{ validate_nic_status }} for admin nic"
  tags: [validate, admin-network]

- name: Validate admin nic netmask
  ansible.builtin.assert:
    that:
      - network_data.admin_network.netmask_bits == ansible_facts[admin_nic]['ipv4']['prefix']
    fail_msg: "{{ admin_nic_netmask_fail_msg }}"

- name: Validate admin network static_range and netmask
  block:
    - name: Check network static_range format
      ansible.builtin.command:
        argv:
          - "{{ python_version }}"
          - "{{ ip_range_netmask_script_script }}"
          - "{{ network_data.admin_network.static_range }}"
          - "{{ network_data.admin_network.netmask_bits }}"
      changed_when: false
      register: static_range_check
      failed_when: static_range_check.stdout == "False" or static_range_check.rc != 0
      with_dict:
        - "{{ network_data }}"
  rescue:
    - name: Rescue block
      ansible.builtin.fail:
        msg: "{{ fail_msg_admin_static_netmask_bits }}"

- name: Validate admin uncorrelated ip
  block:
    - name: Check admin uncorrelated ip
      ansible.builtin.command:
        argv:
          - "{{ python_version }}"
          - "{{ validate_ip_within_range }}"
          - "{{ network_data.admin_network.static_range }}"
          - "{{ network_data.admin_network.admin_uncorrelated_node_start_ip }}"
      register: script_output
      changed_when: false
      failed_when: script_output.stdout == "False" or script_output.rc != 0
      when: network_data.admin_network.admin_uncorrelated_node_start_ip | default("", true) | length > 0
  rescue:
    - name: Admin uncorrelated ip invalid
      ansible.builtin.fail:
        msg: "{{ admin_uncorrelated_ip_fail_msg }}"

- name: Set default admin uncorrelated ip
  ansible.builtin.set_fact:
    admin_uncorrelated_node_start_ip: "{{ pxe_nic_start_range }}"
  when: network_data.admin_network.admin_uncorrelated_node_start_ip | default("", true) | length == 0

- name: Set admin uncorrelated ip
  ansible.builtin.set_fact:
    admin_uncorrelated_node_start_ip: "{{ network_data.admin_network.admin_uncorrelated_node_start_ip }}"
  when: network_data.admin_network.admin_uncorrelated_node_start_ip | default("", true) | length > 0

- name: Validate admin correlation
  ansible.builtin.assert:
    that:
      - network_data.admin_network.correlation_to_admin == true or
        network_data.admin_network.correlation_to_admin == false
    fail_msg: "{{ admin_correlation_fail_msg }}"
  when: network_data.admin_network.correlation_to_admin != None

- name: Set default correlation_to_admin status
  ansible.builtin.set_fact:
    correlation_status: false
  when: network_data.admin_network.correlation_to_admin == None

- name: Set correlation_to_admin status
  ansible.builtin.set_fact:
    correlation_status: "{{ network_data.admin_network.correlation_to_admin }}"
  when: network_data.admin_network.correlation_to_admin != None

- name: Validate admin network gateway
  block:
    - name: Check network gateway IP is valid
      ansible.builtin.assert:
        that:
          - network_data.admin_network.network_gateway.split('.') | map('int') | list | length == 4
          - network_data.admin_network.network_gateway | default("", true) | ansible.utils.ipaddr
      when:
        - "'network_gateway' in network_data.admin_network.keys()"
        - network_data.admin_network.network_gateway | length > 0
  rescue:
    - name: Admin network gateway invalid
      ansible.builtin.fail:
        msg: "{{ network_gateway_fail_msg }}"

- name: Assign values to pxe nic
  ansible.builtin.set_fact:
    pxe_nic: "{{ admin_nic }}"
    pxe_nic_ip: "{{ admin_nic_ip }}"
    pxe_nic_subnet: "{{ (admin_nic_ip + '/' + network_data.admin_network.netmask_bits) | ansible.utils.ipaddr('network') }}"
    pxe_nic_netmask: "{{ (admin_nic_ip + '/' + network_data.admin_network.netmask_bits) | ansible.utils.ipaddr('netmask') }}"

- name: Gather the MAC address of admin nic
  ansible.builtin.set_fact:
    pxe_mac_address: "{{ ansible_facts[pxe_nic]['macaddress'] | default(None) }}"
