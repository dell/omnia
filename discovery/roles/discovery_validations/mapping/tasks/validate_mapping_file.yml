# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Delete temp_mapping_file
  ansible.builtin.file:
    path: "{{ temp_pxe_file_path }}"
    state: absent

- name: Remove spaces from the mapping file
  ansible.builtin.shell: >
    set -o pipefail && \
    tr -d ' ' < "{{ pxe_mapping_file_path }}" > "{{ temp_pxe_file_path }}"
  changed_when: false
  failed_when: false

- name: Find and Replace
  ansible.builtin.lineinfile:
    path: "{{ temp_pxe_file_path }}"
    regexp: '\s*#'
    state: absent

- name: Validate mapping file
  block:
    - name: Validate the mapping file
      ansible.builtin.command: |
        {{ python_version }} {{ validate_mapping_py }} {{ temp_pxe_file_path }} {{ pxe_nic_start_range }} {{ pxe_nic_end_range }}
      changed_when: false
      register: val_mapping_msg

  rescue:
     - name: Rescue block
       ansible.builtin.fail:
          msg: "{{ val_mapping_msg.stderr }}"
       when: val_mapping_msg.stderr is defined

- name: Read host mapping file from CSV file and return a dictionary
  community.general.read_csv:
    path: "{{ temp_pxe_file_path }}"
    key: "{{ mapping_file_key }}"
  register: read_mapping_file

- name: Initialize count variables
  ansible.builtin.set_fact:
    list_of_hostnames: []
    count_total_items: "{{ read_mapping_file.dict | length }}"

- name: Create list of hostnames defined in mapping file
  ansible.builtin.set_fact:
    list_of_hostnames: "{{ [item.value.HOSTNAME] + list_of_hostnames }}"
  loop: "{{ read_mapping_file.dict | dict2items }}"
  loop_control:
    label: "{{ item.value.ADMIN_MAC }}"

- name: Assert hostnames
  ansible.builtin.assert:
    that:
      - '"_" not in item'
      - '"." not in item'
      - '" " not in item'
      - '"node-" not in item'
    quiet: true
    fail_msg: "{{ hostname_chars_fail_msg + item }}"
  with_items: "{{ list_of_hostnames }}"

- name: Validate capital case in hostname
  ansible.builtin.assert:
    that: item is regex(("^(([a-z]|[a-z][a-z0-9\-]*[a-z0-9])\.)*([a-z]|[a-z][a-z0-9\-]*[a-z0-9])$"))
    fail_msg: "{{ capital_hostname_fail_msg }}"
  with_items: "{{ list_of_hostnames }}"