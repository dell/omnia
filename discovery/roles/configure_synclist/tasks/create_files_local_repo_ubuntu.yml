# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Check if cluster repo template present or not
  ansible.builtin.stat:
    path: "{{ base_url_ubuntu }}"
  register: cluster_repo_stat

- name: Fail if not present
  ansible.builtin.fail:
    msg: "{{ cluster_repo_template_fail }}"
  when:
    - not cluster_repo_stat.stat.exists

- name: Create repos for compute nodes
  when: repo_config == 'partial'
  block:
    - name: Remove /tmp/keyrings directory if already exists
      ansible.builtin.file:
        path: "{{ tmp_keyrings_path }}"
        state: absent

    - name: Create /tmp/keyrings directory
      ansible.builtin.file:
        path: "{{ tmp_keyrings_path }}"
        state: directory
        mode: "{{ dir_mode }}"
      become: true

    - name: Generate and copy cluster repository configuration
      ansible.builtin.template:
        src: "{{ cluster_repo_template_src }}"
        dest: "{{ cluster_repo_config_file }}"
        mode: "{{ repo_file_permission }}"

    - name: Generate and copy User Repositories
      ansible.builtin.template:
        src: "{{ user_repo_template_src }}"
        dest: "{{ temp_dir_repo }}/a_user_repo{{ item.0 + 1 }}.list"
        mode: "{{ file_mode }}"
      with_indexed_items: "{{ user_repo_url }}"
      when: item.1.url is defined

    - name: Download and save GPG keys for each user repository
      ansible.builtin.shell:
        cmd: "set -o pipefail | wget -q {{ item.1.gpgkey }} -O - | gpg --dearmor | sudo tee {{ tmp_keyrings_path }}/a_user_repo{{ item.0 + 1 }}.gpg"
      with_indexed_items: "{{ user_repo_url }}"
      when: item.1.gpgkey is defined and item.1.gpgkey != ''
      changed_when: false

    - name: Check if beegfs repo exists
      ansible.builtin.stat:
        path: "{{ beegfs_file_path }}"
      register: beegfs_file

    - name: Check if amdgpu repo exists
      ansible.builtin.stat:
        path: "{{ amdgpu_file_path }}"
      register: amdgpu_file

    - name: Check if rocm repo exists
      ansible.builtin.stat:
        path: "{{ rocm_file_path }}"
      register: rocm_file

    - name: Generate and copy software repository configurations
      ansible.builtin.template:
        src: "{{ repo_config_template_src }}"
        dest: "{{ repo_config_file }}"
        mode: "{{ repo_file_permission }}"
      loop: "{{ user_config.softwares + user_config.amdgpu | default([]) }}"
      when: "(beegfs_name in item.name and beegfs_file.stat.exists) or (amdgpu_name in item.name and amdgpu_file.stat.exists)
              or (rocm_name in item.name and rocm_file.stat.exists)"
      loop_control:
        loop_var: item

# always
- name: Create repos for compute nodes
  when: repo_config == 'always'
  block:
    - name: Generate and copy cluster repository configuration
      ansible.builtin.template:
        src: "{{ cluster_repo_template_src }}"
        dest: "{{ cluster_repo_config_file }}"
        mode: "{{ repo_file_permission }}"

    - name: Check if beegfs repo exists
      ansible.builtin.stat:
        path: "{{ beegfs_file_path }}"
      register: beegfs_file

    - name: Check if amdgpu repo exists
      ansible.builtin.stat:
        path: "{{ amdgpu_file_path }}"
      register: amdgpu_file

    - name: Check if rocm repo exists
      ansible.builtin.stat:
        path: "{{ rocm_file_path }}"
      register: rocm_file

    - name: Generate and copy software repository configurations
      ansible.builtin.template:
        src: "{{ repo_config_template_src }}"
        dest: "{{ repo_config_file }}"
        mode: "{{ repo_file_permission }}"
      loop: "{{ user_config.softwares + user_config.amdgpu | default([]) }}"
      when: "(beegfs_name in item.name and beegfs_file.stat.exists) or (amdgpu_name in item.name and amdgpu_file.stat.exists)
             or (rocm_name in item.name and rocm_file.stat.exists)"
      loop_control:
        loop_var: item

# never case
- name: Create repos for compute nodes
  when: repo_config == 'never'
  block:

    - name: Remove /tmp/keyrings directory if already exists
      ansible.builtin.file:
        path: "{{ tmp_keyrings_path }}"
        state: absent

    - name: Create /tmp/keyrings directory
      ansible.builtin.file:
        path: "{{ tmp_keyrings_path }}"
        state: directory
        mode: "{{ dir_mode }}"
      become: true

    - name: Generate and copy cluster repository configuration
      ansible.builtin.template:
        src: "{{ cluster_repo_template_src }}"
        dest: "{{ cluster_repo_config_file }}"
        mode: "{{ repo_file_permission }}"

    - name: Generate and copy User Repositories
      ansible.builtin.template:
        src: "{{ user_repo_template_src }}"
        dest: "{{ temp_dir_repo }}/a_user_repo{{ item.0 + 1 }}.list"
        mode: "{{ file_mode }}"
      with_indexed_items: "{{ user_repo_url }}"
      when: item.1.url is defined

    - name: Download and save GPG keys for each user repository
      ansible.builtin.shell:
        cmd: "set -o pipefail | wget -q {{ item.1.gpgkey }} -O - | gpg --dearmor | sudo tee {{ tmp_keyrings_path }}/a_user_repo{{ item.0 + 1 }}.gpg"
      with_indexed_items: "{{ user_repo_url }}"
      when: item.1.gpgkey is defined and item.1.gpgkey != ''
      changed_when: false

    - name: Check repo url in {{ temp_dir_repo }}
      ansible.builtin.command: grep -r "{{ item.1.url }}$" "{{ temp_dir_repo }}"
      register: check_repo_url
      changed_when: false
      failed_when: check_repo_url.stderr!=''
      with_indexed_items: "{{ omnia_repo_url_ubuntu }}"
      when: item.1.url is defined

    - name: Generate and copy Omnia Repositories
      ansible.builtin.template:
        src: "{{ omnia_repo_template_src }}"
        dest: "{{ temp_dir_repo }}/omnia_repo{{ item.0 + 1 }}.list"
        mode: "{{ file_mode }}"
      with_indexed_items: "{{ omnia_repo_url_ubuntu }}"
      when:
        - item.1.url is defined
        - software_config_default not in item.1.url
        - check_repo_url is defined
        - item.1.url not in check_repo_url.stdout|default([])

    - name: Download and save GPG keys for each omnia repository
      ansible.builtin.shell:
        cmd: "set -o pipefail | wget -q {{ item.1.gpgkey }} -O - | gpg --dearmor | sudo tee {{ tmp_keyrings_path }}/omnia_repo{{ item.0 + 1 }}.gpg"
      with_indexed_items: "{{ omnia_repo_url_ubuntu }}"
      when: item.1.gpgkey is defined and item.1.gpgkey != ''
      changed_when: false

    - name: Download and save Public keys for each omnia repository
      ansible.builtin.shell:
        cmd: "set -o pipefail | wget -q {{ item.1.publickey }} -O - | gpg --dearmor | sudo tee {{ tmp_keyrings_path }}/omnia_repo{{ item.0 + 1 }}.gpg"
      with_indexed_items: "{{ omnia_repo_url_ubuntu }}"
      when: item.1.publickey is defined and item.1.publickey != ''
      changed_when: false
