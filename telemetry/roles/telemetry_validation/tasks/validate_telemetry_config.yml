# Copyright 2023 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include telemetry_config_file.yml
- name: Check that the telemetry_config.yml exists
  ansible.builtin.stat:
    path: "{{ telemetry_config_file }}"
  register: stat_result

- name: Fail if telemetry_config.yml file doesn't exist
  ansible.builtin.fail:
    msg: "{{ fail_msg_telemetry_config_file }}"
  when: not stat_result.stat.exists

- name: Check telemetry_config.yml file is encrypted
  ansible.builtin.command: cat {{ telemetry_config_file }}
  changed_when: false
  register: config_content
  no_log: true

- name: Decrpyt telemetry_login_vars.yml
  ansible.builtin.command: >-
    ansible-vault decrypt {{ telemetry_config_file }}
    --vault-password-file {{ vault_filename }}
  changed_when: false
  when: "'$ANSIBLE_VAULT;' in config_content.stdout"

- name: Include variable file telemetry_config.yml
  block:
    - name: Include variable file telemetry_config.yml
      ansible.builtin.include_vars: "{{ telemetry_config_file }}"
      register: include_telemetry_config
      no_log: true
  rescue:
    - name: Failed to include telemetry_config.yml
      ansible.builtin.fail:
        msg: "{{ telemetry_config_syntax_fail_msg }} Possible Syntax Error Hints: {{ include_telemetry_config.message }}"

- name: Set support values
  ansible.builtin.set_fact:
    idrac_telemetry_support: "{{ idrac_telemetry_support | lower }}"
    omnia_telemetry_support: "{{ omnia_telemetry_support | lower }}"
    visualization_support: "{{ visualization_support | lower }}"

- name: Assert idrac telemetry support
  ansible.builtin.assert:
    that:
      - idrac_telemetry_support == true or idrac_telemetry_support == false
    success_msg: "{{ idrac_telemetry_support_success_msg }}"
    fail_msg: "{{ idrac_telemetry_support_fail_msg }}"

- name: Assert omnia telemetry support
  ansible.builtin.assert:
    that:
      - omnia_telemetry_support == true or omnia_telemetry_support == false
    fail_msg: "{{ omnia_telemetry_support_fail_msg }}"

- name: Assert visualization support
  ansible.builtin.assert:
    that:
      - visualization_support == true or visualization_support == false
    success_msg: "{{ visualization_support_success_msg }}"
    fail_msg: "{{ visualization_support_fail_msg }}"

- name: Warning for all telemetry support category values set as false
  ansible.builtin.pause:
    seconds: "{{ pause_time_15 }}"
    prompt: "{{ warning_telemetry_support_false }}"
  when: not idrac_telemetry_support and not omnia_telemetry_support and not visualization_support

- name: Please wait, This task will take few seconds
  ansible.builtin.pause:
    seconds: "{{ idrac_omnia_telemetry_support_false_warn_time }}"
    prompt: "{{ idrac_omnia_telemetry_support_warn_msg }}"
  when: not idrac_telemetry_support and not omnia_telemetry_support

- name: Assert usernames and passwords in telemetry_login_vars.yml
  when: idrac_telemetry_support or omnia_telemetry_support
  block:
    - name: Assert timescaledb user name
      ansible.builtin.assert:
        that:
          - timescaledb_user | length > 1
          - '"-" not in timescaledb_user '
          - '"\\" not in timescaledb_user '
          - '"\"" not in timescaledb_user '
          - " \"'\" not in timescaledb_user "
      no_log: true

    - name: Assert timescaledb user password
      ansible.builtin.assert:
        that:
          - timescaledb_password | length > 1
          - '"-" not in timescaledb_password '
          - '"\\" not in timescaledb_password '
          - '"\"" not in timescaledb_password '
          - " \"'\" not in timescaledb_password "
          - '"@" not in timescaledb_password '
      no_log: true

  rescue:
    - name: Validation issue in telemetry_config.yml
      ansible.builtin.fail:
        msg: "{{ login_vars_fail_msg }}"

# Include validations for idrac telemetry
- name: Validate idrac telemetry
  ansible.builtin.include_tasks: validate_idrac_telemetry.yml
  when: idrac_telemetry_support

# Include validations for omnia telemetry
- name: Validate omnia telemetry
  ansible.builtin.include_tasks: validate_omnia_telemetry.yml
  when: omnia_telemetry_support

- name: Include grafana validations
  ansible.builtin.include_tasks: validate_grafana_params.yml
  when: visualization_support

# Validate k8s inputs
- name: Assert k8s_cni
  ansible.builtin.assert:
    that:
      - k8s_cni == "calico" or k8s_cni == "flannel"
    fail_msg: "{{ invalid_k8s_cni }}"

- name: Assert pod external IP range
  ansible.builtin.assert:
    that:
      - pod_external_ip_range | default("", true) | length > 9
      - ("'/' in pod_external_ip_range") or ("'-' in pod_external_ip_range")
    fail_msg: "{{ invalid_pod_external_ip_range }}"

- name: Assert kubernetes service addresses
  ansible.builtin.assert:
    that:
      - k8s_service_addresses | default("", true) | length > 9
      - '"/" in k8s_service_addresses'
    fail_msg: "{{ invalid_k8s_service_addresses }}"

- name: Assert kubernetes pod network CIDR
  ansible.builtin.assert:
    that:
      - k8s_pod_network_cidr | default("", true) | length > 9
      - '"/" in k8s_pod_network_cidr'
    fail_msg: "{{ invalid_k8s_pod_network_cidr }}"

# Encrypt telemetry_config.yml
- name: Create ansible vault key
  ansible.builtin.set_fact:
    vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
  when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

- name: Save vault key
  ansible.builtin.lineinfile:
    path: "{{ vault_filename }}"
    line: "{{ vault_key }}"
    mode: "{{ vault_file_perm }}"
    owner: root
    create: true
  when: "'$ANSIBLE_VAULT;' not in config_content.stdout"

- name: Encrypt telemetry_config.yml file
  ansible.builtin.command: >-
    ansible-vault encrypt {{ telemetry_config_file }}
    --vault-password-file {{ vault_filename }}
  changed_when: false