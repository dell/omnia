#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Check if omnia_vault_key exists
  ansible.builtin.stat:
    path: "{{ omnia_vault_path }}"
  register: vault_key_result

- name: Create ansible vault key if it does not exist
  ansible.builtin.set_fact:
    vault_key: "{{ lookup('password', '/dev/null chars=ascii_letters') }}"
  when: not vault_key_result.stat.exists

- name: Save vault key
  ansible.builtin.lineinfile:
    path: "{{ omnia_vault_path }}"
    line: "{{ vault_key }}"
    mode: "{{ vault_key_permission }}"
    owner: root
    create: true
  when: not vault_key_result.stat.exists

- name: Check if omnia config file is encrypted
  ansible.builtin.command: cat {{ omnia_config_path }}
  changed_when: false
  register: config_content
  no_log: true

- name: Decrpyt omnia_config.yml
  ansible.builtin.command: >-
    ansible-vault decrypt {{ omnia_config_path }}
    --vault-password-file {{ omnia_vault_path }}
  when: "'$ANSIBLE_VAULT;' in config_content.stdout"
  changed_when: true

- name: Include variable file omnia_config.yml
  block:
    - name: Include variable file omnia_config.yml
      ansible.builtin.include_vars: "{{ omnia_config_path }}"
      register: include_omnia_config
      no_log: true
  rescue:
    - name: Failed to include omnia_config.yml
      ansible.builtin.fail:
        msg: "{{ omnia_config_syntax_fail_msg }} Error: {{ include_omnia_config.message }}"

- name: Validate input parameters are mentioned properly for slurm installation type
  ansible.builtin.fail:
    msg: "{{ slurm_installation_type_wrong_failure_msg }}"
  register: input_config_check
  when:
    - slurm_installation_type | default("", true) not in ["nfs_share", "configless"]

- name: Encrypt input config file
  ansible.builtin.command: >-
    ansible-vault encrypt {{ omnia_config_path }}
    --vault-password-file {{ omnia_vault_path }}
  changed_when: false
