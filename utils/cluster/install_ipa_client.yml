# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# This playbook is used to install FreeIPA clients in nfs_node
# Use the below command for execution, by providing appropriate values for input fields.
# ansible-playbook install_ipa_client.yml -i inventory -e kerberos_admin_password="" -e ipa_server_hostname="" -e domain_name="" -e ipa_server_ipadress=""

- name: Initialize variables
  hosts: localhost
  tasks:
    - name: Initialize security variables
      ansible.builtin.set_fact:
        authentication_system: "freeipa"

- name: Install IPA client
  hosts: all
  gather_facts: true
  vars:
    nfs_node_group_fail_msg: "nfs_node group should be present in inventory and contain exactly 1 node"
    nfs_node_group_success_msg: "nfs_node group check passed"
    success_validation_msg: 'Validated all required input parameters'
    fail_valid_msg: 'Missing input parameters. Provide all required input parameters. Command to execute:
    ansible-playbook install_ipa_client.yml -i inventory -e kerberos_admin_password="" -e ipa_server_hostname="" -e domain_name="" -e ipa_server_ipadress=""'
  tasks:
    - name: Verify all paramaters are provided
      ansible.builtin.assert:
        that:
          - kerberos_admin_password is defined
          - ipa_server_hostname is defined
          - domain_name is defined
          - ipa_server_ipadress is defined
          - kerberos_admin_password | length > 1
          - ipa_server_hostname | length > 1
          - domain_name | length > 1
          - ipa_server_ipadress | length > 1
        success_msg: "{{ success_validation_msg }}"
        fail_msg: "{{ fail_valid_msg }}"

    - name: Execute hostname_validation role
      ansible.builtin.include_role:
        name: "{{ playbook_dir }}/../../security/roles/hostname_validation"
        tasks_from: validate_hostname

    - name: Add ports of manager and login node to firewall
      ansible.builtin.include_role:
        name: "{{ playbook_dir }}/../../security/roles/login_common"
        tasks_from: firewall_settings

    - name: Enable module idm in Rocky or Centos >= 8.0
      ansible.builtin.include_role:
        name: "{{ playbook_dir }}/../../security/roles/login_common"
        tasks_from: enable_dnf_module

    - name: Update Packages
      ansible.builtin.include_role:
        name: "{{ playbook_dir }}/../../security/roles/login_common"
        tasks_from: update_package

    - name: Include login_node vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/../../security/roles/login_node/vars/main.yml"

    - name: Include login_common vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/../../security/roles/login_common/vars/main.yml"

    - name: Execute firewall_settings from login_node role
      ansible.builtin.include_role:
        name: "{{ playbook_dir }}/../../security/roles/login_node"
        tasks_from: firewall_settings

    - name: Install DL1 - client(It may take 5-10 mins)
      ansible.builtin.command: yum module install idm:DL1/client -y
      changed_when: true
      failed_when: false
      args:
        warn: false
      when: ansible_distribution | lower == os_redhat

    - name: Install freeipa client package
      ansible.builtin.package:
        name: "{{ ipa_client_package }}"
        state: present

    - name: Delete the cert_path
      ansible.builtin.command: rm -rf {{ cert_path }}
      changed_when: false
      failed_when: false
      args:
        warn: false
      when: ansible_distribution | lower == os_redhat

    - name: Add host name in hosts file
      ansible.builtin.lineinfile:
        dest: "{{ hosts_file_dest }}"
        line: "{{ ipa_server_ipadress }} {{ ipa_server_hostname }}"
        state: present
        create: true
        mode: "{{ hosts_file_mode }}"

    - name: Uninstall client if already installed
      ansible.builtin.command: ipa-client-install --uninstall -U
      changed_when: false
      failed_when: false

    - name: Install ipa client
      block:
        - name: Install ipa client in CentOS 7.9(It may take 5-10 mins)
          ansible.builtin.command: >-
            ipa-client-install --domain '{{ domain_name }}' --server '{{ ipa_server_hostname }}'
            --principal admin --password '{{ kerberos_admin_password }}' --force-join --enable-dns-updates --force-ntpd --mkhomedir -U
          changed_when: true
          no_log: true
          register: install_ipa_client
          when:
            - ( ansible_distribution | lower == os_centos )
            - ( ansible_distribution_version < os_version )

        - name: Install ipa client in RHEL 8 or Rocky 8(It may take 5-10 mins)
          ansible.builtin.command: >-
            ipa-client-install --domain '{{ domain_name }}' --server '{{ ipa_server_hostname }}'
            --principal admin --password '{{ kerberos_admin_password }}' --force-join --enable-dns-updates --no-ntp --mkhomedir -U
          changed_when: true
          no_log: true
          register: install_ipa_client
          when:
            - ( ansible_distribution | lower == os_centos ) or
              ( ansible_distribution | lower == os_rocky ) or
              ( ansible_distribution | lower == os_redhat )
            - ( ansible_distribution_version >= os_version )
      rescue:
        - name: Install ipa client failed
          ansible.builtin.fail:
            msg: "Error: {{ install_ipa_client.stderr_lines }}"

    - name: Install mkhomedir to enable home directory creation for users
      ansible.builtin.command: authselect enable-feature with-mkhomedir
      changed_when: false
      failed_when: false

    - name: Enable oddjob service
      ansible.builtin.systemd:
        name: oddjobd
        state: started
        enabled: true
      failed_when: false
