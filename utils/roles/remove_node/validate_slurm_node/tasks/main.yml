#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Validate slurm groups
  ansible.builtin.fail:
    msg: "{{ slurm_inv_fail_msg }}"
  when:
    - groups['slurm_control_node'] is not defined or groups['slurm_node'] is not defined
    - groups['slurm_node'] | length == 0
    - groups['slurm_control_node'] | length != 1

- name: Get slurm_control_node fomrat
  ansible.builtin.set_fact:
    ctrl_format: "{{ 'ip_format' if (groups['slurm_control_node'] | first) is match('^(\\d{1,3}\\.){3}\\d{1,3}$') else 'non_ip_format' }}"

- name: Validate slurm_control_node entry if it is IP format
  when: ctrl_format == 'ip_format'
  block:
    - name: Get details from DB when ip format
      community.postgresql.postgresql_query:
        db: omniadb
        login_user: postgres
        query: SELECT status FROM cluster.nodeinfo where (node!='control_plane') AND (admin_ip='{{ item }}');
        login_password: "{{ hostvars['localhost']['postgresdb_password'] }}"
      become_user: postgres
      register: ctrl_ip_query_status
      with_items: "{{ groups['slurm_control_node'] | first }}"
      no_log: true

    - name: Fail if not found in DB
      ansible.builtin.fail:
        msg: "{{ not_valid_control_node }}"
      when: ctrl_ip_query_status.results[0].rowcount == 0 or ctrl_ip_query_status.results[0].query_result[0].status != 'booted'

- name: Validatte slurm_control_node entry when it is non IP format
  when: ctrl_format == 'non_ip_format'
  block:
    - name: Get details from DB when non ip format
      community.postgresql.postgresql_query:
        db: omniadb
        login_user: postgres
        query: SELECT status FROM cluster.nodeinfo where (node!='control_plane') AND (service_tag='{{ item | upper }}' OR node='{{ item }}' OR hostname='{{ item }}'); # noqa: yaml[line-length]
        login_password: "{{ hostvars['localhost']['postgresdb_password'] }}"
      become_user: postgres
      register: ctrl_non_ip_query_status
      with_items: "{{ groups['slurm_control_node'] | first }}"
      no_log: true

    - name: Fail if not found in DB
      ansible.builtin.fail:
        msg: "{{ not_valid_control_node }}"
      when: ctrl_non_ip_query_status.results[0].rowcount == 0 or ctrl_non_ip_query_status.results[0].query_result[0].status != 'booted'

- name: Initialize variables
  ansible.builtin.set_fact:
    ip_addresses: []
    non_ip_addresses: []

- name: Get IP addresses from inventory
  ansible.builtin.set_fact:
    ip_addresses: "{{ ip_addresses + [item] }}"
  with_items: "{{ groups['slurm_node'] }}"
  when: item is match('^(\d{1,3}\.){3}\d{1,3}$')

- name: Get items which are not IP addresses from inventory
  ansible.builtin.set_fact:
    non_ip_addresses: "{{ groups['slurm_node'] | difference(ip_addresses) }}"

- name: Set variables based on inventory item types
  ansible.builtin.set_fact:
    only_ip_present: "{{ true if (ip_addresses | length > 0 and non_ip_addresses | length == 0) else false }}"
    only_non_ip_present: "{{ true if (ip_addresses | length == 0 and non_ip_addresses | length > 0) else false }}"

- name: Get node details from DB if inventory values are IP
  community.postgresql.postgresql_query:
    db: omniadb
    login_user: postgres
    query: SELECT hostname,status,admin_ip FROM cluster.nodeinfo where (node!='control_plane') AND (admin_ip='{{ item }}');
    login_password: "{{ hostvars['localhost']['postgresdb_password'] }}"
  become_user: postgres
  register: ip_query_status
  with_items: "{{ ip_addresses }}"
  no_log: true

- name: Get node details from DB if inventory values are not IP address
  community.postgresql.postgresql_query:
    db: omniadb
    login_user: postgres
    query: SELECT hostname,status,admin_ip FROM cluster.nodeinfo where (node!='control_plane') AND (service_tag='{{ item | upper }}' OR node='{{ item }}' OR hostname='{{ item }}'); # noqa: yaml[line-length]
    login_password: "{{ hostvars['localhost']['postgresdb_password'] }}"
  become_user: postgres
  register: non_ip_query_status
  with_items: "{{ non_ip_addresses }}"
  no_log: true

- name: Set query result
  ansible.builtin.set_fact:
    query_results: >-
      {{
        only_ip_present | ternary(ip_query_status.results,
        only_non_ip_present | ternary( non_ip_query_status.results, ip_query_status.results + non_ip_query_status.results))
      }}

- name: Initialize variables
  ansible.builtin.set_fact:
    valid_nodes: {}
    invalid_nodes: []

- name: Set valid nodes
  ansible.builtin.set_fact:
    valid_nodes: "{{ valid_nodes | combine({item.item: {'hostname': item.query_result[0].hostname,
      'admin_ip': item.query_result[0].admin_ip,
      'status': item.query_result[0].status}}) }}"
  when: item.rowcount!=0
  loop: "{{ query_results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Set invalid nodes
  ansible.builtin.set_fact:
    invalid_nodes: "{{ invalid_nodes + [item.item] }}"
  when: item.rowcount==0
  loop: "{{ query_results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Warning for invalid nodes
  ansible.builtin.debug:
    msg: "{{ warn_msg_for_invalid_node }}"
  with_items: "{{ invalid_nodes }}"

- name: Get slurm info output if slurm is installed
  ansible.builtin.command: 'sinfo -h --format="%N"'
  register: slurm_output
  failed_when: false
  changed_when: false
  delegate_to: "{{ item.value.admin_ip }}"
  when: item.value.status == 'booted'
  loop: "{{ query('ansible.builtin.dict', valid_nodes) }}"
  loop_control:
    label: "{{ item.key }}"

- name: Warning slurm is not installed on provided node
  ansible.builtin.debug:
    msg: "{{ slurm_not_installed }}"
  when: item.rc != 0
  loop: "{{ slurm_output.results }}"
  loop_control:
    label: "{{ item.item.key }}"

- name: Add all removing nodes to group remove_slurm_node
  ansible.builtin.add_host:
    name: '{{ item.item.key }}'
    groups: remove_slurm_node
    node_hostname: '{{ item.item.value.hostname }}'
    status: '{{ item.item.value.status }}'
  when: item.rc == 0 or item.item.value.status != 'booted'
  loop: "{{ slurm_output.results }}"
  loop_control:
    label: "{{ item.item.key }}"
