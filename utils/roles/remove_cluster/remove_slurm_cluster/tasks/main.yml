#  Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Validate slurm groups
  ansible.builtin.fail:
    msg: "{{ slurm_inv_fail_msg }}"
  when: groups['slurm_control_node'] is not defined or groups['slurm_node'] is not defined
  run_once: true

- name: Get service facts
  ansible.builtin.service_facts:
  register: slurm_status
  no_log: true

- name: Initialize variable
  ansible.builtin.set_fact:
    slurm_output: true

# if any of service is installed set output as false
- name: Check if slurm services exists
  ansible.builtin.set_fact:
    slurm_output: false
  when:
    - "'slurmd.service' not in slurm_status.ansible_facts.services"
    - "'slurmctld.service' not in slurm_status.ansible_facts.services"
    - "'slurmdbd.service' not in slurm_status.ansible_facts.services"

- name: Ignore if slurm services not exists
  when: not slurm_output
  ansible.builtin.fail:
    msg: "{{ slurm_not_exists }}"
  ignore_errors: true # noqa: ignore-errors

- name: Reset slurm configuration
  when: slurm_output
  block:
    - name: Stop Slurm services
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
        enabled: false
      with_items: "{{ slurm_services }}"
      failed_when: false

    - name: Remove Slurm user
      ansible.builtin.user:
        name: slurm
        state: absent
      failed_when: false

    - name: Remove Slurm packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: absent
      with_items: "{{ slurm_packages }}"
      failed_when: false

    - name: Remove slurmd service
      ansible.builtin.file:
        state: absent
        path: "{{ slurmd_servicepath }}"
      ignore_errors: true # noqa: ignore-errors
      when: inventory_hostname in groups['slurm_node']

    - name: Remove slurmdbd service
      ansible.builtin.file:
        state: absent
        path: "{{ slurmdbd_servicepath }}"
      ignore_errors: true # noqa: ignore-errors
      when: inventory_hostname in groups['slurm_control_node']

    - name: Remove slurmctld service
      ansible.builtin.file:
        state: absent
        path: "{{ slurmctld_servicepath }}"
      ignore_errors: true # noqa: ignore-errors
      when: inventory_hostname in groups['slurm_control_node']

    - name: Remove Slurm common configuration files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ slurm_common_files }}"
      failed_when: false

    - name: Remove Slurm configuration files if slurm is installed in configless mode
      when:
        - slurm_output
        - hostvars['localhost']['slurm_installation_type'] is defined
        - hostvars['localhost']['slurm_installation_type'] | length > 0
        - hostvars['localhost']['slurm_installation_type'] == "configless"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ slurm_configless_files }}"
      failed_when: false

    - name: Remove Slurm configuration files if slurm is installed on NFS share
      when:
        - slurm_output
        - hostvars['localhost']['slurm_installation_type'] is defined
        - hostvars['localhost']['slurm_installation_type'] | length > 0
        - hostvars['localhost']['slurm_installation_type'] == "nfs_share"
      block:
        - name: Get NFS share path from storage_config.yml
          ansible.builtin.set_fact:
            share_path: "{{ hostvars['localhost']['nfs_client_params']
                            | selectattr('slurm_share', 'equalto', true)
                            | map(attribute='client_share_path') | first }}"
          when:
            - hostvars['localhost']['nfs_client_params'] is defined and hostvars['localhost']['nfs_client_params'] | length > 0
            - hostvars['localhost']['nfs_client_params'] | selectattr('slurm_share', 'defined') | selectattr('slurm_share', 'equalto', true) | list | length == 1 # noqa: yaml[line-length]

        - name: Check whether slurm folder exists in NFS share
          when: share_path is defined
          ansible.builtin.stat:
            path: "{{ share_path }}{{ slurm_nfs_folder }}"
          register: file_stat

        - name: Remove slurm directory
          when: share_path is defined and file_stat.stat.exists
          ansible.builtin.file:
            path: "{{ share_path }}{{ slurm_nfs_folder }}"
            state: absent
          failed_when: false

        - name: Remove SLURM_CONF variable
          ansible.builtin.lineinfile:
            state: absent
            path: "{{ bashrc_path }}"
            regexp: '^export SLURM_CONF=.*$'
