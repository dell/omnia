# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Configure pxe IP to static
  hosts: all
  gather_facts: true
  tasks:
    - name: Initialize variables
      ansible.builtin.set_fact:
        resolv_status: false
        dns_lst: []

    - name: Fetch IP address with Prefix
      ansible.builtin.shell: >
          set -o pipefail && \
          ip a | grep '{{ inventory_hostname }}' | grep "inet " | tail -1 | awk '{print $2}'
      changed_when: false
      register: ip_prefix

    - name: Save gateway of NIC
      ansible.builtin.set_fact:
        prev_gateway: "{{ ansible_default_ipv4.gateway }}"

    - name: Count number of entries present in resolv.conf
      ansible.builtin.shell: >
          set -o pipefail && \
          grep "nameserver" /etc/resolv.conf | wc -l
      changed_when: false
      failed_when: false
      register: dns_count

    - name: Fetch resolv.conf entries
      block:
        - name: Fetching entries from resolv.conf
          ansible.builtin.command: grep "nameserver" /etc/resolv.conf
          changed_when: false
          register: resolv_conf_status

        - name: Creating a list with resolv conf values
          ansible.builtin.set_fact:
            dns_entries: "{{ resolv_conf_status.stdout.split('\n') }}"

        - name: Create a list of DNS entries
          ansible.builtin.set_fact:
            dns_lst: "{{ dns_lst + [item.split(' ')[1]] }}"
          with_items: "{{ dns_entries }}"

        - name: Update resolv_status
          ansible.builtin.set_fact:
            resolv_status: true
          when: dns_lst | length > 0
      when: dns_count.stdout | int > 0

    - name: Fetch connection name
      ansible.builtin.shell: >
          set -o pipefail && \
          cat /etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }} | grep 'NAME'
      changed_when: false
      register: conn_name

    - name: Save connection name
      ansible.builtin.set_fact:
        nic_conn_name: "{{ conn_name.stdout.split('=')[1] }}"

    - name: Remove extra characters from connection name
      ansible.builtin.set_fact:
        nic_name: "{{ nic_conn_name[1:-1] }}"
      when: '" " in nic_conn_name'

    - name: Save nic connection when extra characters are not available
      ansible.builtin.set_fact:
        nic_name: "{{ nic_conn_name }}"
      when: '" " not in nic_conn_name'

    - name: Change IP from dhcp to static with DNS entries
      ansible.builtin.nmcli:
        conn_name: '{{ nic_name }}'
        type: ethernet
        ip4: '{{ ip_prefix.stdout }}'
        gw4: '{{ prev_gateway }}'
        dns4: '{{ dns_lst }}'
        state: present
      when: resolv_status

    - name: Change IP from dhcp to static without DNS entries
      ansible.builtin.nmcli:
        conn_name: '{{ nic_name }}'
        type: ethernet
        ip4: '{{ ip_prefix.stdout }}'
        gw4: '{{ prev_gateway }}'
        state: present
      when: not resolv_status

    - name: Restart network manager
      ansible.builtin.systemd:
        state: restarted
        name: NetworkManager
        enabled: true
