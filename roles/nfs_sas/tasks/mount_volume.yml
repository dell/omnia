#  Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Define volume name and identifier ID
  set_fact:
    volume_name: "{{ item['volume-name'] }}"
    wwn_id: "{{ item.wwn | lower }}"

- name: Define server share path for the volume
  set_fact:
    server_share_path: "{{ value.server_share_path }}"
    server_export_options: "{{ value.server_export_options }}"
  when: value.name == volume_name 
  loop: "{{ powervault_volumes }}"
  loop_control: 
    label: "{{ value.name }}"
    loop_var: value

- name: Check multipath output
  shell: >
          set -o pipefail && \
          multipath -ll | grep "{{ wwn_id }}"
  changed_when: false
  register: multipath_output

- name: Set PVS, VGS, LVS values
  set_fact:
    mpath_name: "{{ multipath_output.stdout.split()[0] }}"
    vg_name: "{{ volume_name }}_VG"
    lv_name: "{{ volume_name }}_LV"

- name: Check existing physical volumes
  command: pvs
  changed_when: false 
  register: pvs_output

- name: Declare a new physical volume space
  command: pvcreate "/dev/mapper/{{ mpath_name }}"
  changed_when: false
  when: mpath_name not in pvs_output.stdout

- name: Install lvm2 dependency
  package:
    name: lvm2
    state: present

- name: Check existing volume groups
  command: vgs
  changed_when: false 
  register: vgs_output

- name: Task for creating volume group
  lvg:
    vg: "{{ vg_name }}"
    pvs: "/dev/mapper/{{ mpath_name }}"
    pvresize: yes
    state: present
  when: vg_name not in vgs_output.stdout

- name: Check volume group free size
  shell: >
          set -o pipefail && \
          vgdisplay "{{ vg_name }}" | grep Free
  changed_when: false 
  register: vg_free_output

- name: Check existing logical volumes
  command: lvs
  changed_when: false 
  register: lvs_output

- name: Task for creating logical volume
  lvol:
    vg: "{{ vg_name }}"
    lv:  "{{ lv_name }}"
    size: "{{ lvm_size }}"
    state: present
  when: vg_name not in lvs_output.stdout

- name: Set LVM path value
  set_fact:
    lvm_path: "/dev/mapper/{{ vg_name }}-{{ lv_name }}"

- name: Check mount status
  shell: >
          set -o pipefail && \
          mount | grep "{{ lvm_path }}"
  changed_when: false
  register: mount_status
  failed_when: false

- block:
  - name: Create a ext4 filesystem on lvm
    command: mkfs.ext4 "{{ lvm_path }}"
    changed_when: false

  - name: Make mount directory for volume if it doesnt exist
    file:
      path: "{{ server_share_path }}"
      state: directory
      mode: "{{ mount_dir_permissions }}"
      group: root
      owner: root

  - name: Mount multipath to nfs_server share path 
    mount:
      path: "{{ server_share_path }}"
      src: "{{ lvm_path }}" 
      fstype: ext4
      state: mounted
    changed_when: false

  when: lvm_path not in mount_status.stdout

- name: Setting server_export_options
  set_fact:
    server_export_options: "{{ default_server_options }}"
  when: server_export_options | default("", true) | length < 1

- name: Adding NFS share entries in /etc/exports
  lineinfile:
    path: "{{ exports_file }}"
    line: "{{ server_share_path }} {{ node }}({{ server_export_options }})"
  with_items:
    - "{{ groups['manager'] }}"
    - "{{ groups['compute'] }}"
  loop_control:
    loop_var: node

- name: Adding NFS share entries in /etc/exports
  lineinfile:
    path: "{{ exports_file }}"
    line: "{{ server_share_path }} {{ node }}({{ server_export_options }})"
  with_items:
    - "{{ groups['login_node'] }}"
  loop_control:
    loop_var: node
  when:
    - groups['login_node'] is defined
    - groups['login_node'] | length | int > 0
