#  Copyright 2020 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Give slurm user permission to slurmctld spool
  file:
    path: "{{ spool_slurmctld_pth }}"
    owner: slurm
    group: slurm
    mode: "{{ tmp_mode }}"
    state: touch

- name: Give slurm ownership to cluster state
  file:
    path: "{{ cluster_state_path }}"
    owner: slurm
    group: slurm
    mode: "{{ tmp_mode }}"
    state: touch

- name: Create slurmctld log file on manager
  file:
    path: "{{ slurm_logpth }}"
    owner: slurm
    mode: "{{ tmp_mode }}"
    state: touch
  with_items:
    - slurmctld.log

- name: Create log files on manager
  file:
    path: "{{ slurm_logpth }}"
    owner: slurm
    mode: "{{ tmp_mode }}"
    state: touch
  with_items:
    - "{{ log_files_manager }}"

- name: Install packages for slurm
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ slurm_packages }}"
  tags: install

- name: Install development tools
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ dev_tools }}"
  tags: install

- name: Verify if slurm is installed
  shell: rpm -qa | grep slurm
  ignore_errors: true
  register: verify_result
  changed_when: no
  failed_when: no
  args:
    warn: no

- name: Create temporary download folder for slurm
  file:
    path: "{{ tmp_path }}"
    owner: slurm
    group: slurm
    mode: "{{ tmp_mode }}"
    state: directory
  when: verify_result.rc != 0

- name: Download slurm source
  get_url:
    url: "{{ slurm_url }}"
    dest: "{{ tmp_path }}"
    checksum: "{{ slurm_md5 }}"
    validate_certs: no
  tags: install
  when: verify_result.rc != 0

- name: Build slurm rpms
  command: rpmbuild -ta "{{ rpmbuild_path }}" --with mysql
  changed_when: false
  when: verify_result.rc != 0
  args:
    warn: no

- name: Install rpms
  command: rpm -Uvh ~"{{ rpm_loop }}"
  args:
    chdir: "{{ rpm_path }}"
    warn: no
  changed_when: true
  when: verify_result.rc != 0

- name: Get the hostname
  command: hostname
  register: machine_name
  changed_when: true

- name: Add control machine name
  lineinfile:
    path: "{{ slurm_confpth }}"
    regexp: "ControlMachine="
    line: "ControlMachine={{ machine_name.stdout }}"

- name: Add slurm user name
  lineinfile:
    path: "{{ slurm_confpth }}"
    regexp: "SlurmUser="
    line: "SlurmUser={{ slurm_user }}"

- name: Install firewalld
  package:
    name: firewalld
    state: present
  tags: firewalld

- name: Start and enable firewalld
  service:
    name: firewalld
    state: started
    enabled: yes
  tags: firewalld

- name: Firewall rule for slurm - tcp/udp ports
  firewalld:
    zone: public
    port: "{{ item }}"
    permanent: true
    state: enabled
  with_items:
    - "{{ tcp_port1 }}"
    - "{{ tcp_port2 }}"
    - "{{ tcp_port3 }}"
    - "{{ tcp_port4 }}"
    - "{{ udp_port3 }}"
    - "{{ udp_port1 }}"
    - "{{ udp_port2 }}"
  when: "'manager' in group_names"
  tags: firewalld

- name: Get network address/subnet mask
  set_fact:
    network_address: "{{ (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask) | ipaddr('network/prefix') }}"

- name: Firewall rule slurm - allow all incoming traffic on internal network
  firewalld:
    zone: public
    rich_rule: 'rule family="{{ family }}" source address="{{ network_address }}" accept'
    permanent: true
    state: enabled
  tags: firewalld

- name: Reload firewalld
  command: firewall-cmd --reload
  changed_when: true
  tags: firewalld

- name: Start mariadb
  systemd:
    name: mariadb
    state: restarted
    enabled: yes
  tags: install

- name: Grant permissions for slurm db
  command: >-
    mysql -u root -e "GRANT ALL ON slurm_acct_db.* TO '{{ db_user }}'@'{{
    db_host }}' identified by '{{ hostvars['127.0.0.1']['db_password'] }}'with
    grant option;"
  tags: install
  changed_when: true

- name: Create slurmdbd.conf file
  copy:
    src: slurmdbd.conf
    dest: "{{ slurmdbd_path }}"
    mode: "{{ slurmdbd_mode }}"
    owner: slurm
  tags: install

- name: Add slurm user name
  lineinfile:
    path: "{{ slurmdbd_path }}"
    regexp: "SlurmUser="
    line: "SlurmUser={{ slurm_user }}"

- name: Add db address
  lineinfile:
    path: "{{ slurmdbd_path }}"
    regexp: "DbdAddr="
    line: "DbdAddr={{ DbdAddr }}"

- name: Add db host
  lineinfile:
    path: "{{ slurmdbd_path }}"
    regexp: "DbdHost="
    line: "DbdHost={{ DbdHost }}"

- name: Add storage password
  lineinfile:
    path: "{{ slurmdbd_path }}"
    regexp: "StoragePass="
    line: "StoragePass={{ hostvars['127.0.0.1']['db_password'] }}"

- name: Add storage user
  lineinfile:
    path: "{{ slurmdbd_path }}"
    regexp: "StorageUser="
    line: "StorageUser={{ slurm_user }}"

- name: Add log file path
  lineinfile:
    path: "{{ slurmdbd_path }}"
    regexp: "LogFile="
    line: "LogFile={{ logfile }}"

- name: Add pid file path
  lineinfile:
    path: "{{ slurmdbd_path }}"
    regexp: "PidFile="
    line: "PidFile={{ pidfile }}"

- name: Save slurm conf file in buffer
  fetch:
    src: "{{ slurm_confpth }}"
    dest: "{{ buffer_path }}"
    flat: true