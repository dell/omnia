# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Testcase OMNIA_1.3_PV_ME4_TC_001
# Test case to validate configuration of disks and disk-groups

- name: OMNIA_1.3_PV_ME4_TC_001
  hosts: all
  connection: local

  tags: TC_001
  gather_subset:
    - 'min'

  vars_files: 
    - ../input_params/base_vars.yml
    - ../input_params/powervault_vars.yml
    - test_vars/test_me4_vars.yml

  tasks:

    - name: Check login_vars file is encrypted
      command: cat {{ login_vars_path }}
      changed_when: false
      register: config_content
      no_log: true
      tags: always

    - name: Decrpyt login_vars.yml
      command: >-
        ansible-vault decrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"
      no_log: true
      tags: always

    - name: Include variable file login_vars.yml
      include_vars: "{{ login_vars_path }}"
      no_log: true
      tags: always

    - name: Get auth string
      command: echo -n {{ powervault_me4_username }}_{{ powervault_me4_password }} | sha256sum
      register: auth_string_output
      changed_when: false
      failed_when: false
      no_log: true
      tags: always

    - name: Set the powervault username and password
      set_fact:
        powervault_username: "{{ powervault_me4_username }}"
        powervault_password: "{{ powervault_me4_password }}"
        auth_string: "{{ auth_string_output }}"
      no_log: true
      tags: always

    - name: Encypt login file
      command: >-
        ansible-vault encrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      no_log: true
      tags: always

    - name: Ping the powervault device to validate connectivity
      command: ping -c1 {{ inventory_hostname }}
      register: validate_login
      changed_when: false
      failed_when: false
      tags: VERIFY_OMNIA_01

    - name: Validate the powervault connectivity
      assert:
        that:
          - "'ping' in validate_login.stdout"
        success_msg: "{{ connectivity_success_msg }}"
        fail_msg: "{{ connectivity_failure_msg }}"
      tags: VERIFY_OMNIA_01

    - name: Get session key
      uri:
        url: https://{{ inventory_hostname }}/api/login/{{ auth_string.stdout | replace("  -", "") }}
        method: GET
        headers:
          {'datatype': 'json'}
        validate_certs: no
      register: session_key
      tags: VERIFY_OMNIA_01

    - name: Execute disk-groups command
      uri:
        url: https://{{ inventory_hostname }}/api/show/disk-groups
        method: GET
        body_format: json
        validate_certs: no
        use_proxy: no
        headers:
          {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
        register: disk_groups_info

    - name: Validating the powervault disk groups
      assert:
        that:
          - disk_groups_info.json['disk-groups'][0]['name'] == "{{ powervault_disk_group_name }}"
        success_msg: "{{ disk_groups_pass }}"
        fail_msg: "{{ disk_groups_fail }}"

    - name: Execute disks command
      uri:
        url: https://{{ inventory_hostname }}/api/show/disks
        method: GET
        body_format: json
        validate_certs: no
        use_proxy: no
        headers:
          {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
        register: disks_info

    - name: Validating the powervault disks
      assert:
        that:
          - disks_info.json['drives'][0]['disk-group'] == "{{ powervault_disk_group_name }}"
        success_msg: "{{ disks_pass }}"
        fail_msg: "{{ disks_fail }}"


# Testcase OMNIA_1.3_PV_ME4_TC_002
# Test case to validate configuration of pools


- name: OMNIA_1.3_PV_ME4_TC_001
  hosts: all
  connection: local

  tags: TC_002
  gather_subset:
    - 'min'

  vars_files: 
    - ../input_params/base_vars.yml
    - ../input_params/powervault_vars.yml
    - test_vars/test_me4_vars.yml

  tasks:

    - name: Check login_vars file is encrypted
      command: cat {{ login_vars_path }}
      changed_when: false
      register: config_content
      no_log: true
      tags: always

    - name: Decrpyt login_vars.yml
      command: >-
        ansible-vault decrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"
      no_log: true
      tags: always

    - name: Include variable file login_vars.yml
      include_vars: "{{ login_vars_path }}"
      no_log: true
      tags: always

    - name: Get auth string
      command: echo -n {{ powervault_me4_username }}_{{ powervault_me4_password }} | sha256sum
      register: auth_string_output
      changed_when: false
      failed_when: false
      no_log: true
      tags: always

    - name: Set the powervault username and password
      set_fact:
        powervault_username: "{{ powervault_me4_username }}"
        powervault_password: "{{ powervault_me4_password }}"
        auth_string: "{{ auth_string_output }}"
      no_log: true
      tags: always

    - name: Encypt login file
      command: >-
        ansible-vault encrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      no_log: true
      tags: always

    - name: Ping the powervault device to validate connectivity
      command: ping -c1 {{ inventory_hostname }}
      register: validate_login
      changed_when: false
      failed_when: false
      tags: VERIFY_OMNIA_01

    - name: Validate the powervault connectivity
      assert:
        that:
          - "'ping' in validate_login.stdout"
        success_msg: "{{ connectivity_success_msg }}"
        fail_msg: "{{ connectivity_failure_msg }}"
      tags: VERIFY_OMNIA_01

    - name: Get session key
      uri:
        url: https://{{ inventory_hostname }}/api/login/{{ auth_string.stdout | replace("  -", "") }}
        method: GET
        headers:
          {'datatype': 'json'}
        validate_certs: no
      register: session_key
      tags: VERIFY_OMNIA_01

    - name: Execute disk-groups command
      uri:
        url: https://{{ inventory_hostname }}/api/show/pools
        method: GET
        body_format: json
        validate_certs: no
        use_proxy: no
        headers:
          {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
        register: pools_info

    - name: Validating the powervault disk groups
      assert:
        that:
          - pools_info.json['pools'][0]['disk-groups'][0]['pool'] == "{{ powervault_pool }}"
        success_msg: "{{ pools_pass }}"
        fail_msg: "{{ pools_fail }}"


# Testcase OMNIA_1.3_PV_ME4_TC_003
# Test case to valiate the system behaviour with server_shared_path and client_shared_path are empty

- name: OMNIA_1.3_PV_ME4_TC_003
  hosts: all
  connection: local

  vars_files:
    - "test_vars/test_me4_vars.yml"
    - "../input_params/powervault_vars.yml"

  tags: TC_003

  tasks:

    - name: Run powervault template
      command: "ansible-playbook powervault.yml -i test/inventory"
      register: powervault_status
      changed_when: true

    - name: check_failure
      assert:
        that:
          - '"non-zero return code" in output.msg'
        debug:
        success_msg: "{{ shared_path_pass_msg }}"
        fail_msg: "{{ shared_path_fail_msg }}"
      tags: Checking_failures

# Testcase OMNIA_1.3_PV_ME4_TC_004
# Test case to validate the system behaviour with server_shared_path is empty and client_shared_path is provided

- name: OMNIA_1.3_PV_ME4_TC_004
  hosts: all
  connection: local

  vars_files:
    - "test_vars/test_me4_vars.yml"
    - "../input_params/powervault_vars.yml"

  tags: TC_004

  tasks:

    - name: Run powervault template
      command: "ansible-playbook powervault.yml -i test/inventory"
      register: powervault_status
      changed_when: true

    - name: check_failure
      assert:
        that:
          - '"non-zero return code" in output.msg'
        debug:
        success_msg: "{{ shared_path_pass_msg }}"
        fail_msg: "{{ shared_path_fail_msg }}"


# Testcase OMNIA_1.3_PV_ME4_TC_005
# Test case to validate the system behaviour with server_shared_path is provided and client_shared_path is empty

- name: OMNIA_1.3_PV_ME4_TC_005
  hosts: all
  connection: local

  vars_files:
    - "test_vars/test_me4_vars.yml"
    - "../input_params/powervault_vars.yml"

  tags: TC_005

  tasks:

    - name: Run powervault template
      command: "ansible-playbook powervault.yml -i test/inventory"
      register: powervault_status
      changed_when: true

    - name: Check server_shared_path
      assert:
        that:
          - "'pass' in output.stdout"
        success_msg: "{{ powervault_success_msg }}"
        fail_msg: "{{ powervault_fail_msg }}"
      tags: TC_005


# Testcase OMNIA_1.3_PV_ME4_TC_006
# Test case to validate the system behaviour with server_shared_path is provided and client_shared_path is provided

- name: OMNIA_1.3_PV_ME4_TC_006
  hosts: all
  connection: local

  vars_files:
    - "test_vars/test_me4_vars.yml"
    - "../input_params/powervault_vars.yml"

  tags: TC_006

  tasks:

    - name: Run powervault template
      command: "ansible-playbook powervault.yml -i test/inventory"
      register: powervault_status
      changed_when: true

    - name: Check server_shared_path
      assert:
        that:
          - "'pass' in output.stdout"
        success_msg: "{{ powervault_success_msg }}"
        fail_msg: "{{ powervault_fail_msg }}"
      tags: TC_006