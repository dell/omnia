# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Testcase OMNIA_1.3_PV_me4_TC_001
# Test case to validate configuration of disks and disk-groups

- name: PV_me4_TC_01
  hosts: powervault
  connection: local
  tags: TC_001
  gather_subset:
    - 'min'
  vars_files:
    - ../input_params/base_vars.yml
    - ../input_params/powervault_vars.yml
    - test_vars/test_powervault_vars.yml
  tasks:
    - name: Check login_vars file is encrypted
      command: cat {{ login_vars_path }}
      changed_when: false
      register: config_content
      tags: always

    - name: Decrpyt login_vars.yml
      command: >-
        ansible-vault decrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"
      tags: always

    - name: Include variable file login_vars.yml
      include_vars: "{{ login_vars_path }}"
      tags: always

    - name: Get auth string
      shell: echo -n {{ powervault_username }}_{{ powervault_password }} | sha256sum
      register: auth_string_output
      changed_when: false
      failed_when: false
      tags: always

    - name: Set the powervault username and password
      set_fact:
        pv_username: "{{ powervault_username }}"
        pv_password: "{{ powervault_password }}"
        auth_string: "{{ auth_string_output }}"
      no_log: true
      tags: always

    - name: Encypt login file
      command: >-
        ansible-vault encrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      tags: always

    - name: Ping the powervault device to validate connectivity
      command: ping -c1 {{ inventory_hostname }}
      register: validate_login
      changed_when: false
      failed_when: false
      tags: VERIFY_OMNIA_01

    - name: Validate the powervault connectivity
      assert:
        that:
          - "'ping' in validate_login.stdout"
        success_msg: "{{ connectivity_success_msg }}"
        fail_msg: "{{ connectivity_failure_msg }}"
      tags: VERIFY_OMNIA_01

    - name: Get session key
      uri:
        url: https://{{ inventory_hostname }}/api/login/{{ auth_string.stdout | replace(" -", "") }}
        method: GET
        headers:
          {'datatype': 'json'}
        validate_certs: no
        timeout: 100
      register: session_key
      tags: Verify_session

    - name: Execute show disk-groups command
      uri:
        url: https://{{ inventory_hostname }}/api/show/disk-groups

        method: GET
        body_format: json
        validate_certs: no
        use_proxy: no
        headers:
          {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
      register: system_info
      tags: Verify_show_disk_groups

    - name: Validating the powervault disk groups
      assert:
        that:
          - loop: system_info.json['disk-groups']['name'] == "{{ powervault_disk_group_name }}"
        success_msg: "{{ disk_groups_pass }}"
        fail_msg: "{{ disk_groups_fail }}"
      tags: Validate_disk_groups

    - name: Execute show disks command
      uri:
        url: https://{{ inventory_hostname }}/api/show/disks
        method: GET
        body_format: json
        validate_certs: no
        use_proxy: no
        headers:
          {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
      register: disks_info
      tags: Verify_show_disks


    - name: Validating the povervault disks

      assert:
        that:
          - disks_info.json['drives'][0]['disk-group'] == "{{ powervault_disk_group_name }}"
        success_msg: "{{ disks_pass }}"

        fail_msg: "{{ disks_fail }}"
      tags: Validate_disks

# Testcase OMNIA_1.3_PV_TC_002
# Test case to validate configuration of pools and volumes

- name: PV_me4_TC_02
  hosts: powervault
  connection: local
  tags: TC_002
  gather_subset:
    - 'min'
  vars_files:
    - ../input_params/base_vars.yml
    - ../input_params/powervault_vars.yml
    - test_vars/test_powervault_vars.yml
  tasks:
    - name: Check login_vars file is encrypted
      command: cat {{ login_vars_path }}
      changed_when: false
      register: config_content
      tags: always

    - name: Decrpyt login_vars.yml
      command: >-
        ansible-vault decrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      when: "'$ANSIBLE_VAULT;' in config_content.stdout"
      tags: always

    - name: Include variable file login_vars.yml
      include_vars: "{{ login_vars_path }}"
      tags: always

    - name: Get auth string
      shell: echo -n {{ powervault_username }}_{{ powervault_password }} | sha256sum
      register: auth_string_output
      changed_when: false
      failed_when: false
      tags: always

    - name: Set the powervault username and password
      set_fact:
        powervault_username: "{{ powervault_username }}"
        powervault_password: "{{ powervault_password }}"
        auth_string: "{{ auth_string_output }}"
      no_log: true
      tags: always

    - name: Encypt login file
      command: >-
        ansible-vault encrypt {{ login_vars_path }}
        --vault-password-file {{ login_vars_vault_path }}
      changed_when: false
      tags: always

    - name: Ping the powervault device to validate connectivity

      command: ping -c1 {{ inventory_hostname }}
      register: validate_login
      changed_when: false
      failed_when: false
      tags: VERIFY_OMNIA_01

    - name: Validate the powervault connectivity
      assert:
        that:
          - "'ping' in validate_login.stdout"
        success_msg: "{{ connectivity_success_msg }}"
        fail_msg: "{{ connectivity_failure_msg }}"
      tags: VERIFY_OMNIA_01

    - name: Get session key
      uri:
        url: https://{{ inventory_hostname }}/api/login/{{ auth_string.stdout | replace(" -", "") }}
        method: GET
        headers:
          {'datatype': 'json'}
        validate_certs: no
        timeout: 100
      register: session_key
      tags: Verify_session

    - name: Execute show pools command
      uri:
        url: https://{{ inventory_hostname }}/api/show/pools
        method: GET
        body_format: json
        validate_certs: no
        use_proxy: no
        headers:
          {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
      register: pools_info
      tags: Verify_show_pools


    - name: Validating the powervault pools
      assert:
        that:
          - pools_info.json['pools'][0]['disk-groups'][0]['pool'] == "{{ powervault_pool }}"
        success_msg: "{{ pools_pass }}"
        fail_msg: "{{ pools_fail }}"
      tags: Validate_pools

    - name: Execute show volumes command
      uri:
        url: https://{{ inventory_hostname }}/api/show/volumes
        method: GET
        body_format: json
        validate_certs: no
        use_proxy: no
        headers:
          {'sessionKey': "{{ session_key.json.status[0].response }}", 'datatype':'json'}
      register: volumes_info
      tags: Verify_show_volumes


    # Testcase OMNIA_1.3_PV_me4_TC_003
# Test case to valiate the system behaviour with server_shared_path and client_shared_path are empty

- name: PV_me4_TC_03
  hosts: localhost
  connection: local
  vars_files:
    - "test_vars/test_me4_vars.yml" 
    - "../input_params/powervault_vars.yml"
  tags: TC_003
  tasks:
    - name: Check Hostname
      command: hostnamectl
      register: hostdetails

    - block:
        - name: Execute powervault playbook using AWX collections
          vars:
            inventory_name: "{{ powervault_inventory_name }}"
            template_name: "{{ template_value }}"
            job_template_name: "{{ job_name }}"
            playbook_path: "{{ powervault_playbook_path }}"
            delete_status: false
          include_tasks: "{{ awx_script_path }}"

    - block:
        - name: check_failure
          assert:     
            that:
              - '"non-zero return code" in output.msg'
            debug:
            success_msg: "{{ shared_path_pass_msg }}"
            fail_msg: "{{ shared_path_fail_msg }}"
          tags: Checking_failures
          when: server_shared_path == null and client_shared_path == null

# Testcase OMNIA_1.3_PV_me4_TC_004
# Test case to valiate the system behaviour with server_shared_path is empty and client_shared_path is provided

- name: PV_me4_TC_04
  hosts: localhost
  connection: local
  vars_files:
    - "test_vars/test_me4_vars.yml" 
    - "../input_params/powervault_vars.yml"
  tags: TC_004
  tasks:
    - name: Check Hostname
      command: hostnamectl
      register: hostdetails

    - block:
        - name: Execute powervault playbook using AWX collections
          vars:
            inventory_name: "{{ powervault_inventory_name }}"
            template_name: "{{ template_value }}"
            job_template_name: "{{ job_name }}"
            playbook_path: "{{ powervault_playbook_path }}"
            delete_status: false
          include_tasks: "{{ awx_script_path }}"

    - block:
        - name: check_failure
          assert:     
            that:
              - '"non-zero return code" in output.msg'
            debug:
            success_msg: "{{ server_shared_path_pass_msg }}"
            fail_msg: "{{ server_shared_path_fail_msg }}"
          tags: Checking_failures
          when: server_shared_path == null

# Testcase OMNIA_1.3_PV_me4_TC_005
# Test case to valiate the system behaviour with server_shared_path is provided and client_shared_path is empty

- name: PV_me4_TC_05
  hosts: localhost
  connection: local
  vars_files:
    - "test_vars/test_me4_vars.yml" 
    - "../input_params/powervault_vars.yml"
  tags: TC_005
  tasks:
    - name: Check Hostname
      command: hostnamectl
      register: hostdetails

    - block:
        - name: Execute powervault playbook using AWX collections
          vars:
            inventory_name: "{{ powervault_inventory_name }}"
            template_name: "{{ template_value }}"
            job_template_name: "{{ job_name }}"
            playbook_path: "{{ powervault_playbook_path }}"
            delete_status: false
          include_tasks: "{{ awx_script_path }}"

    - block:
        - name: check_failure
          assert:     
            that:
              - '"non-zero return code" in output.msg'
            debug:
            success_msg: "{{ client_shared_path_pass_msg }}"
            fail_msg: "{{ client_shared_path_fail_msg }}"
          tags: Checking_failures
          when: client_shared_path == null

# Testcase OMNIA_1.3_PV_me4_TC_006
# Test case to valiate the system behaviour with server_shared_path and client_shared_path is provided

- name: PV_me4_TC_006
  hosts: localhost
  connection: local
  vars_files:
    - "test_vars/test_me4_vars.yml" 
    - "../input_params/powervault_vars.yml"
  tags: TC_006
  tasks:
    - name: Check Hostname
      command: hostnamectl
      register: hostdetails

    - block:
        - name: Execute powervault playbook using AWX collections
          vars:
            inventory_name: "{{ powervault_inventory_name }}"
            template_name: "{{ template_value }}"
            job_template_name: "{{ job_name }}"
            playbook_path: "{{ powervault_playbook_path }}"
            delete_status: false
          include_tasks: "{{ awx_script_path }}"

    - block:
        - name: Execute default validation script
          include_tasks: "{{ me4_validation_script_path }}"
          tags: Execute_Validation_Script


