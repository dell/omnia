# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Fetch the network interfaces in UP state in the system
  shell: set -o pipefail && /usr/sbin/ip a | awk '/state UP/{print $2}'
  register: nic_addr_up
  changed_when: false
  tags: init

- name: Assert public nic
  assert:
    that:
      - public_nic in nic_addr_up.stdout
    success_msg: "{{ success_msg_public_nic }}"
    fail_msg: "{{ fail_msg_public_nic }}"
  tags: [ validate, init ]

- name: Fetch the system public IP
  set_fact:
    public_ip: "{{ lookup('vars','ansible_'+public_nic).ipv4.address }}"
  tags: init

- name: Verify different nics
  assert:
    that:
      - public_nic != host_network_nic
      - mgmt_network_nic == host_network_nic
    success_msg: "{{ success_msg_different_nics }}"
    fail_msg: "{{ fail_msg_different_nics }}"
  when: network_interface_type == "lom"
  tags: [ validate, pxe, network-device ]

- name: Initiliaze variables
  set_fact:
    mgmt_network_ip: 0.0.0.0
    mgmt_network_netmask: 0.0.0.0
    mgmt_network_subnet: 0.0.0.0
    host_ip: 0.0.0.0
    netmask: 0.0.0.0
    subnet: 0.0.0.0
    host_dhcp_end: 0.0.0.0
  tags: init

- name: Assert valid values for host and mgmt network dhcp start and end range
  assert:
    that:
      - host_network_dhcp_start_range | length > 1
      - host_network_dhcp_start_range | ipv4
      - host_network_dhcp_end_range | length > 1
      - host_network_dhcp_end_range | ipv4
      - mgmt_network_dhcp_start_range | length > 1
      - mgmt_network_dhcp_start_range | ipv4
      - mgmt_network_dhcp_end_range | length > 1
      - mgmt_network_dhcp_end_range | ipv4
      - host_network_dhcp_start_range != host_network_dhcp_end_range
      - mgmt_network_dhcp_start_range != mgmt_network_dhcp_end_range
      - mgmt_network_dhcp_start_range != host_network_dhcp_start_range
      - mgmt_network_dhcp_end_range != host_network_dhcp_end_range
    success_msg: "{{ success_dhcp_range }} "
    fail_msg: "{{ fail_dhcp_range }} "
  tags: [ validate, pxe ]

- name: Fetch the available subnets and netmasks
  set_fact:
    ipv4_subnet: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4.network }}"
    ipv4_netmask: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4.netmask }}"
    ipv4_sec_subnet: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4_secondaries[0].network }}"
    ipv4_sec_netmask: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4_secondaries[0].netmask }}"
  tags: init

- name: Check the dhcp start range of mgmt with ipv4_netmask
  shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ mgmt_network_dhcp_start_range  }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ ipv4_netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: mgmt_dhcp_start_ipv4
  changed_when: false
  tags: init

- name: Check the dhcp start range of mgmt with ipv4_sec_netmask
  shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ mgmt_network_dhcp_start_range }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ ipv4_sec_netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: mgmt_dhcp_start_ipv4_sec
  changed_when: false
  tags: init

- name: Check the dhcp start range of host with ipv4
  shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ host_network_dhcp_start_range }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ ipv4_netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: host_dhcp_start_ipv4
  changed_when: false
  tags: init

- name: Check the dhcp start range of host with ipv4_sec
  shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ host_network_dhcp_start_range }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ ipv4_sec_netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: host_dhcp_start_ipv4_sec
  changed_when: false
  tags: init

- name: Assign mgmt ip to nic if ipv4
  set_fact:
    mgmt_network_ip: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4.address }}"
    mgmt_network_netmask: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4.netmask }}"
    mgmt_network_subnet: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4.network }}"
  when: mgmt_dhcp_start_ipv4.stdout == ipv4_subnet
  tags: init

- name: Assign mgmt ip to nic if ipv4_sec
  set_fact:
    mgmt_network_ip: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4_secondaries[0].address }}"
    mgmt_network_netmask: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4_secondaries[0].netmask }}"
    mgmt_network_subnet: "{{ lookup('vars','ansible_'+mgmt_network_nic).ipv4_secondaries[0].network }}"
  when: mgmt_dhcp_start_ipv4_sec.stdout == ipv4_sec_subnet
  tags: init

- name: Assign host ip to nic if ipv4
  set_fact:
    hpc_ip: "{{ lookup('vars','ansible_'+host_network_nic).ipv4.address }}"
    netmask: "{{ lookup('vars','ansible_'+host_network_nic).ipv4.netmask }}"
    subnet: "{{ lookup('vars','ansible_'+host_network_nic).ipv4.network }}"
  when: host_dhcp_start_ipv4.stdout == ipv4_subnet
  tags: init

- name: Assign host ip to nic if ipv4_sec
  set_fact:
    hpc_ip: "{{ lookup('vars','ansible_'+host_network_nic).ipv4_secondaries[0].address }}"
    netmask: "{{ lookup('vars','ansible_'+host_network_nic).ipv4_secondaries[0].netmask }}"
    subnet: "{{ lookup('vars','ansible_'+host_network_nic).ipv4_secondaries[0].network }}"
  when: host_dhcp_start_ipv4_sec.stdout == ipv4_sec_subnet
  tags: init

- name: Validate the dhcp end range of host
  shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ host_network_dhcp_end_range }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: host_dhcp_end
  changed_when: false
  tags: [ validate, pxe, network-device ]

- name: Validate the dhcp end range of mgmt
  shell: |
    IFS=. read -r i1 i2 i3 i4 <<< "{{ mgmt_network_dhcp_end_range }}"
    IFS=. read -r m1 m2 m3 m4 <<< "{{ mgmt_network_netmask }}"
    printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
  args:
    warn: no
  register: mgmt_dhcp_end
  changed_when: false
  tags: [ validate, pxe, network-device ]

- name: Assert host and mgmt end dhcp ranges
  assert:
    that:
      - host_network_dhcp_start_range != hpc_ip
      - host_network_dhcp_end_range != hpc_ip
      - mgmt_network_dhcp_start_range != mgmt_network_ip
      - mgmt_network_dhcp_end_range != mgmt_network_ip
      - host_dhcp_end.stdout == subnet
      - mgmt_dhcp_end.stdout == mgmt_network_subnet
    success_msg: "{{ success_dhcp_range }} "
    fail_msg: "{{ fail_dhcp_range }} "
  tags: [ validate, pxe, network-device ]

### roce network
- block:
  - name: Fetch the roce network ip, netmask and subnet
    set_fact:
      roce_ip: "{{ lookup('vars','ansible_'+roce_network_nic).ipv4.address }}"
      roce_netmask: "{{ lookup('vars','ansible_'+roce_network_nic).ipv4.netmask }}"
      roce_subnet: "{{ lookup('vars','ansible_'+roce_network_nic).ipv4.network }}"
    tags: init

  - name: Check the subnet of roce network dhcp start range
    shell: |
      IFS=. read -r i1 i2 i3 i4 <<< "{{ roce_network_dhcp_start_range }}"
      IFS=. read -r m1 m2 m3 m4 <<< "{{ roce_netmask }}"
      printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
    args:
      warn: no
    register: dhcp_start_roce_result
    changed_when: false
    tags: init

  - name: Set the start dhcp subnet for roce network
    set_fact:
      dhcp_start_roce: "{{ dhcp_start_roce_result.stdout }}"
    tags: init

  - name: Check the subnet of dhcp end range for roce network
    shell: |
      IFS=. read -r i1 i2 i3 i4 <<< "{{ roce_network_dhcp_end_range }}"
      IFS=. read -r m1 m2 m3 m4 <<< "{{ roce_netmask }}"
      printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
    register: dhcp_end_roce_result
    changed_when: false
    tags: init

  - name: Set the end dhcp subnet for roce network
    set_fact:
      dhcp_end_roce: "{{ dhcp_end_roce_result.stdout }}"
    tags: init

  - name: Assert roce_net_dhcp_start_range
    assert:
      that:
        - roce_network_dhcp_start_range | length > 1
        - roce_network_dhcp_start_range | ipv4
        - roce_network_dhcp_start_range != roce_ip
        - roce_network_dhcp_start_range != roce_network_dhcp_end_range
        - dhcp_start_roce == roce_subnet
        - dhcp_start_roce == dhcp_end_roce
      success_msg: "{{ success_dhcp_range }} for roce network"
      fail_msg: "{{ fail_dhcp_range }} for roce network"
    tags: [ validate, pxe ]

  - name: Assert roce_net_dhcp_end_range
    assert:
      that:
        - roce_network_dhcp_end_range | length > 1
        - roce_network_dhcp_end_range | ipv4
        - roce_network_dhcp_end_range != roce_ip
        - roce_network_dhcp_start_range != roce_network_dhcp_end_range
        - dhcp_end_roce== roce_subnet
        - dhcp_end_roce == dhcp_end_roce
      success_msg: "{{ success_dhcp_range }} for roce network"
      fail_msg: "{{ fail_dhcp_range }} for roce network"
    tags: [ validate, pxe ]
  
  - name: Set fact for roce
    set_fact:
      roce_enabled: true
    tags: init

  when:
    - roce_network_nic | length > 1
    - roce_network_dhcp_start_range | ipv4
### ib network

- block:
    - name: Fetch the infiniband network ip, netmask and subnet
      set_fact:
        ib_ip: "{{ lookup('vars','ansible_'+ib_network_nic).ipv4.address }}"
        ib_netmask: "{{ lookup('vars','ansible_'+ib_network_nic).ipv4.netmask }}"
        ib_subnet: "{{ lookup('vars','ansible_'+ib_network_nic).ipv4.network }}"
      tags: init

    - name: Check the subnet of infiniband network dhcp start range
      shell: |
        IFS=. read -r i1 i2 i3 i4 <<< "{{ ib_network_dhcp_start_range }}"
        IFS=. read -r m1 m2 m3 m4 <<< "{{ ib_netmask }}"
        printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
      args:
        warn: no
      register: dhcp_start_ib_result
      changed_when: false
      tags: init

    - name: Set the start dhcp subnet for infiniband network
      set_fact:
        dhcp_start_ib: "{{ dhcp_start_ib_result.stdout }}"
      tags: init

    - name: Check the subnet of dhcp end range for infiniband network
      shell: |
        IFS=. read -r i1 i2 i3 i4 <<< "{{ ib_network_dhcp_end_range }}"
        IFS=. read -r m1 m2 m3 m4 <<< "{{ ib_netmask }}"
        printf "%d.%d.%d.%d\n" "$((i1 & m1))" "$((i2 & m2))" "$((i3 & m3))" "$((i4 & m4))"
      register: dhcp_end_ib_result
      changed_when: false
      tags: init

    - name: Set the end dhcp subnet for infiniband network
      set_fact:
        dhcp_end_ib: "{{ dhcp_end_ib_result.stdout }}"
      tags: init

    - name: Assert infiniband_net_dhcp_start_range
      assert:
        that:
          - ib_network_dhcp_start_range | length > 1
          - ib_network_dhcp_start_range | ipv4
          - ib_network_dhcp_start_range != ib_ip
          - ib_network_dhcp_start_range != ib_network_dhcp_end_range
          - dhcp_start_ib == ib_subnet
          - dhcp_start_ib == dhcp_end_ib
        success_msg: "{{ success_dhcp_range }} for infiniband network"
        fail_msg: "{{ fail_dhcp_range }} for infiniband network"
      tags: [ validate, network-ib ]

    - name: Assert infiniband_net_dhcp_end_range
      assert:
        that:
          - ib_network_dhcp_end_range | length > 1
          - ib_network_dhcp_end_range | ipv4
          - ib_network_dhcp_end_range != ib_ip
          - ib_network_dhcp_start_range != ib_network_dhcp_end_range
          - dhcp_end_ib == ib_subnet
          - dhcp_start_ib == dhcp_end_ib
        success_msg: "{{ success_dhcp_range }} for infiniband network"
        fail_msg: "{{ fail_dhcp_range }} for infiniband network"
      tags: [ validate, network-ib ]

    - name: Verify different nics with infiniband nic
      assert:
        that:
          - public_nic != ib_network_nic
          - mgmt_network_nic != ib_network_nic
          - ib_network_nic != host_network_nic
        success_msg: "{{ success_msg_different_nics_ib }}"
        fail_msg: "{{ fail_msg_different_nics_ib }}"
      tags: [ validate, pxe, network-ib, network-device ]
  when:
    - ib_switch_support
    - not opensm_roce_enabled

- name: Verify different nics with roce nic
  assert:
    that:
      - public_nic != roce_network_nic
      - roce_network_nic != host_network_nic
    success_msg: "{{ success_msg_different_nics_ib }}"
    fail_msg: "{{ fail_msg_different_nics_ib }}"
  tags: [ validate, pxe, network-device ]
  when:
    - roce_network_nic | length > 1
    - mgmt_lom

- name: Verify different nics with roce nic when ib_support is true
  assert:
    that:
      - roce_network_nic != ib_network_nic
    success_msg: "{{ success_msg_different_nics_ib }}"
    fail_msg: "{{ fail_msg_different_nics_ib }}"
  tags: [ validate, pxe, network-ib, network-device ]
  when:
    - ib_switch_support
    - roce_network_nic | length > 1
    - mgmt_lom
    - not opensm_roce_enabled
